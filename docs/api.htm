<html><head><meta content="text/html; charset=UTF-8" http-equiv="content-type"><style type="text/css">@import url('https://themes.googleusercontent.com/fonts/css?kit=IRJFLIKwPKaUNz6w8LA_cl-9U_jkqjwAqRUBEUkk1wxbV0WvE1cEyAoIq5yYZlSc');ol.lst-kix_bb0i0yks2vgs-1{list-style-type:none}ol.lst-kix_m7dyg64omhj-5{list-style-type:none}ol.lst-kix_bb0i0yks2vgs-2{list-style-type:none}ol.lst-kix_m7dyg64omhj-6{list-style-type:none}ol.lst-kix_bb0i0yks2vgs-3{list-style-type:none}.lst-kix_bb0i0yks2vgs-5>li{counter-increment:lst-ctn-kix_bb0i0yks2vgs-5}ol.lst-kix_m7dyg64omhj-7{list-style-type:none}ol.lst-kix_bb0i0yks2vgs-4{list-style-type:none}ol.lst-kix_m7dyg64omhj-8{list-style-type:none}ol.lst-kix_bb0i0yks2vgs-0{list-style-type:none}ol.lst-kix_m7dyg64omhj-0{list-style-type:none}ol.lst-kix_bb0i0yks2vgs-5{list-style-type:none}ol.lst-kix_m7dyg64omhj-1{list-style-type:none}ol.lst-kix_bb0i0yks2vgs-6{list-style-type:none}ol.lst-kix_m7dyg64omhj-2{list-style-type:none}.lst-kix_m7dyg64omhj-6>li{counter-increment:lst-ctn-kix_m7dyg64omhj-6}ol.lst-kix_bb0i0yks2vgs-7{list-style-type:none}ol.lst-kix_m7dyg64omhj-3{list-style-type:none}ol.lst-kix_bb0i0yks2vgs-8{list-style-type:none}ol.lst-kix_m7dyg64omhj-4{list-style-type:none}.lst-kix_bb0i0yks2vgs-6>li{counter-increment:lst-ctn-kix_bb0i0yks2vgs-6}ol.lst-kix_m7dyg64omhj-5.start{counter-reset:lst-ctn-kix_m7dyg64omhj-5 0}ol.lst-kix_bb0i0yks2vgs-1.start{counter-reset:lst-ctn-kix_bb0i0yks2vgs-1 0}ol.lst-kix_m7dyg64omhj-8.start{counter-reset:lst-ctn-kix_m7dyg64omhj-8 0}ol.lst-kix_m7dyg64omhj-2.start{counter-reset:lst-ctn-kix_m7dyg64omhj-2 0}.lst-kix_m7dyg64omhj-8>li{counter-increment:lst-ctn-kix_m7dyg64omhj-8}.lst-kix_m7dyg64omhj-5>li{counter-increment:lst-ctn-kix_m7dyg64omhj-5}.lst-kix_bb0i0yks2vgs-8>li{counter-increment:lst-ctn-kix_bb0i0yks2vgs-8}.lst-kix_bb0i0yks2vgs-2>li{counter-increment:lst-ctn-kix_bb0i0yks2vgs-2}.lst-kix_bb0i0yks2vgs-3>li{counter-increment:lst-ctn-kix_bb0i0yks2vgs-3}ol.lst-kix_bb0i0yks2vgs-4.start{counter-reset:lst-ctn-kix_bb0i0yks2vgs-4 0}.lst-kix_2ohqr9ohdjgh-3>li:before{content:"\0025cf  "}.lst-kix_m7dyg64omhj-3>li{counter-increment:lst-ctn-kix_m7dyg64omhj-3}.lst-kix_2ohqr9ohdjgh-4>li:before{content:"\0025cb  "}.lst-kix_2ohqr9ohdjgh-6>li:before{content:"\0025cf  "}.lst-kix_2ohqr9ohdjgh-5>li:before{content:"\0025a0  "}ol.lst-kix_m7dyg64omhj-6.start{counter-reset:lst-ctn-kix_m7dyg64omhj-6 0}ul.lst-kix_9hmiem2jmh15-1{list-style-type:none}.lst-kix_2ohqr9ohdjgh-8>li:before{content:"\0025a0  "}ul.lst-kix_9hmiem2jmh15-2{list-style-type:none}ul.lst-kix_9hmiem2jmh15-0{list-style-type:none}ul.lst-kix_9hmiem2jmh15-5{list-style-type:none}ul.lst-kix_9hmiem2jmh15-6{list-style-type:none}ul.lst-kix_9hmiem2jmh15-3{list-style-type:none}.lst-kix_2ohqr9ohdjgh-7>li:before{content:"\0025cb  "}ul.lst-kix_9hmiem2jmh15-4{list-style-type:none}ul.lst-kix_2ohqr9ohdjgh-1{list-style-type:none}ul.lst-kix_2ohqr9ohdjgh-0{list-style-type:none}ol.lst-kix_m7dyg64omhj-0.start{counter-reset:lst-ctn-kix_m7dyg64omhj-0 0}ul.lst-kix_2ohqr9ohdjgh-3{list-style-type:none}ul.lst-kix_2ohqr9ohdjgh-2{list-style-type:none}ul.lst-kix_2ohqr9ohdjgh-8{list-style-type:none}ol.lst-kix_bb0i0yks2vgs-3.start{counter-reset:lst-ctn-kix_bb0i0yks2vgs-3 0}ul.lst-kix_2ohqr9ohdjgh-5{list-style-type:none}ol.lst-kix_m7dyg64omhj-7.start{counter-reset:lst-ctn-kix_m7dyg64omhj-7 0}ul.lst-kix_2ohqr9ohdjgh-4{list-style-type:none}ul.lst-kix_2ohqr9ohdjgh-7{list-style-type:none}ul.lst-kix_2ohqr9ohdjgh-6{list-style-type:none}ul.lst-kix_9hmiem2jmh15-7{list-style-type:none}ul.lst-kix_9hmiem2jmh15-8{list-style-type:none}ol.lst-kix_bb0i0yks2vgs-5.start{counter-reset:lst-ctn-kix_bb0i0yks2vgs-5 0}ol.lst-kix_m7dyg64omhj-4.start{counter-reset:lst-ctn-kix_m7dyg64omhj-4 0}.lst-kix_bb0i0yks2vgs-8>li:before{content:"" counter(lst-ctn-kix_bb0i0yks2vgs-8,lower-roman) ". "}.lst-kix_9hmiem2jmh15-6>li:before{content:"\0025cf  "}.lst-kix_m7dyg64omhj-0>li{counter-increment:lst-ctn-kix_m7dyg64omhj-0}ol.lst-kix_bb0i0yks2vgs-2.start{counter-reset:lst-ctn-kix_bb0i0yks2vgs-2 0}.lst-kix_9hmiem2jmh15-7>li:before{content:"\0025cb  "}ol.lst-kix_m7dyg64omhj-1.start{counter-reset:lst-ctn-kix_m7dyg64omhj-1 0}.lst-kix_9hmiem2jmh15-8>li:before{content:"\0025a0  "}.lst-kix_m7dyg64omhj-4>li:before{content:"" counter(lst-ctn-kix_m7dyg64omhj-4,lower-latin) ". "}.lst-kix_m7dyg64omhj-3>li:before{content:"" counter(lst-ctn-kix_m7dyg64omhj-3,decimal) ". "}.lst-kix_m7dyg64omhj-5>li:before{content:"" counter(lst-ctn-kix_m7dyg64omhj-5,lower-roman) ". "}.lst-kix_m7dyg64omhj-7>li:before{content:"" counter(lst-ctn-kix_m7dyg64omhj-7,lower-latin) ". "}.lst-kix_2ohqr9ohdjgh-2>li:before{content:"\0025a0  "}.lst-kix_m7dyg64omhj-6>li:before{content:"" counter(lst-ctn-kix_m7dyg64omhj-6,decimal) ". "}.lst-kix_2ohqr9ohdjgh-1>li:before{content:"\0025cb  "}.lst-kix_mbonxrnmfpf7-8>li:before{content:"\0025a0  "}.lst-kix_bb0i0yks2vgs-0>li{counter-increment:lst-ctn-kix_bb0i0yks2vgs-0}.lst-kix_2ohqr9ohdjgh-0>li:before{content:"\0025cf  "}ol.lst-kix_bb0i0yks2vgs-8.start{counter-reset:lst-ctn-kix_bb0i0yks2vgs-8 0}.lst-kix_m7dyg64omhj-0>li:before{content:"" counter(lst-ctn-kix_m7dyg64omhj-0,decimal) ". "}.lst-kix_m7dyg64omhj-1>li:before{content:"" counter(lst-ctn-kix_m7dyg64omhj-1,lower-latin) ". "}.lst-kix_m7dyg64omhj-2>li:before{content:"" counter(lst-ctn-kix_m7dyg64omhj-2,lower-roman) ". "}.lst-kix_m7dyg64omhj-2>li{counter-increment:lst-ctn-kix_m7dyg64omhj-2}ol.lst-kix_bb0i0yks2vgs-0.start{counter-reset:lst-ctn-kix_bb0i0yks2vgs-0 0}ul.lst-kix_mbonxrnmfpf7-2{list-style-type:none}ul.lst-kix_mbonxrnmfpf7-1{list-style-type:none}ul.lst-kix_mbonxrnmfpf7-4{list-style-type:none}ul.lst-kix_mbonxrnmfpf7-3{list-style-type:none}ul.lst-kix_mbonxrnmfpf7-6{list-style-type:none}.lst-kix_mbonxrnmfpf7-7>li:before{content:"\0025cb  "}ul.lst-kix_mbonxrnmfpf7-5{list-style-type:none}.lst-kix_mbonxrnmfpf7-6>li:before{content:"\0025cf  "}ul.lst-kix_mbonxrnmfpf7-8{list-style-type:none}ul.lst-kix_mbonxrnmfpf7-7{list-style-type:none}.lst-kix_mbonxrnmfpf7-5>li:before{content:"\0025a0  "}.lst-kix_m7dyg64omhj-8>li:before{content:"" counter(lst-ctn-kix_m7dyg64omhj-8,lower-roman) ". "}ol.lst-kix_bb0i0yks2vgs-7.start{counter-reset:lst-ctn-kix_bb0i0yks2vgs-7 0}ul.lst-kix_mbonxrnmfpf7-0{list-style-type:none}.lst-kix_mbonxrnmfpf7-4>li:before{content:"\0025cb  "}.lst-kix_bb0i0yks2vgs-1>li:before{content:"" counter(lst-ctn-kix_bb0i0yks2vgs-1,lower-latin) ". "}.lst-kix_mbonxrnmfpf7-1>li:before{content:"\0025cb  "}.lst-kix_m7dyg64omhj-4>li{counter-increment:lst-ctn-kix_m7dyg64omhj-4}ol.lst-kix_bb0i0yks2vgs-6.start{counter-reset:lst-ctn-kix_bb0i0yks2vgs-6 0}.lst-kix_m7dyg64omhj-7>li{counter-increment:lst-ctn-kix_m7dyg64omhj-7}.lst-kix_bb0i0yks2vgs-0>li:before{content:"" counter(lst-ctn-kix_bb0i0yks2vgs-0,decimal) ". "}.lst-kix_bb0i0yks2vgs-2>li:before{content:"" counter(lst-ctn-kix_bb0i0yks2vgs-2,lower-roman) ". "}.lst-kix_mbonxrnmfpf7-3>li:before{content:"\0025cf  "}.lst-kix_mbonxrnmfpf7-2>li:before{content:"\0025a0  "}.lst-kix_bb0i0yks2vgs-6>li:before{content:"" counter(lst-ctn-kix_bb0i0yks2vgs-6,decimal) ". "}.lst-kix_9hmiem2jmh15-5>li:before{content:"\0025a0  "}ol.lst-kix_m7dyg64omhj-3.start{counter-reset:lst-ctn-kix_m7dyg64omhj-3 0}.lst-kix_bb0i0yks2vgs-7>li:before{content:"" counter(lst-ctn-kix_bb0i0yks2vgs-7,lower-latin) ". "}.lst-kix_mbonxrnmfpf7-0>li:before{content:"\0025cf  "}.lst-kix_m7dyg64omhj-1>li{counter-increment:lst-ctn-kix_m7dyg64omhj-1}.lst-kix_9hmiem2jmh15-4>li:before{content:"\0025cb  "}.lst-kix_9hmiem2jmh15-1>li:before{content:"\0025cb  "}.lst-kix_9hmiem2jmh15-3>li:before{content:"\0025cf  "}.lst-kix_9hmiem2jmh15-2>li:before{content:"\0025a0  "}.lst-kix_bb0i0yks2vgs-4>li{counter-increment:lst-ctn-kix_bb0i0yks2vgs-4}.lst-kix_bb0i0yks2vgs-5>li:before{content:"" counter(lst-ctn-kix_bb0i0yks2vgs-5,lower-roman) ". "}.lst-kix_bb0i0yks2vgs-4>li:before{content:"" counter(lst-ctn-kix_bb0i0yks2vgs-4,lower-latin) ". "}.lst-kix_bb0i0yks2vgs-7>li{counter-increment:lst-ctn-kix_bb0i0yks2vgs-7}.lst-kix_bb0i0yks2vgs-1>li{counter-increment:lst-ctn-kix_bb0i0yks2vgs-1}.lst-kix_bb0i0yks2vgs-3>li:before{content:"" counter(lst-ctn-kix_bb0i0yks2vgs-3,decimal) ". "}.lst-kix_9hmiem2jmh15-0>li:before{content:"\0025cf  "}ol{margin:0;padding:0}table td,table th{padding:0}.c31{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:327.8pt;border-top-color:#000000;border-bottom-style:solid}.c26{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:122.2pt;border-top-color:#000000;border-bottom-style:solid}.c34{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:468pt;border-top-color:#000000;border-bottom-style:solid}.c27{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:309.8pt;border-top-color:#000000;border-bottom-style:solid}.c21{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:140.2pt;border-top-color:#000000;border-bottom-style:solid}.c5{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:147.8pt;border-top-color:#000000;border-bottom-style:solid}.c7{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:325.5pt;border-top-color:#000000;border-bottom-style:solid}.c6{margin-left:36pt;padding-top:0pt;padding-left:0pt;padding-bottom:0pt;line-height:1.15;orphans:2;widows:2;text-align:left}.c3{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:10pt;font-family:"Ubuntu Mono";font-style:normal}.c18{color:#434343;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:14pt;font-family:"Arial";font-style:italic}.c10{color:#000000;font-weight:700;text-decoration:none;vertical-align:baseline;font-size:10pt;font-family:"Arial";font-style:normal}.c14{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:16pt;font-family:"Arial";font-style:normal}.c4{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c0{padding-top:0pt;text-indent:36pt;padding-bottom:0pt;line-height:1.15;orphans:2;widows:2;text-align:left}.c17{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Ubuntu Mono";font-style:normal}.c23{color:#434343;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:14pt;font-family:"Arial";font-style:normal}.c32{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial"}.c8{padding-top:0pt;padding-bottom:0pt;line-height:1.15;orphans:2;widows:2;text-align:left}.c19{padding-top:16pt;padding-bottom:4pt;line-height:1.15;page-break-after:avoid;text-align:left}.c16{padding-top:18pt;padding-bottom:6pt;line-height:1.15;page-break-after:avoid;text-align:left}.c11{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c29{border-spacing:0;border-collapse:collapse;margin-right:auto}.c12{font-size:10pt;font-family:"Ubuntu Mono";font-weight:400}.c35{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c36{color:#000000;text-decoration:none;vertical-align:baseline}.c2{font-weight:700;font-family:"Ubuntu Mono"}.c33{border:1px solid black;margin:5px}.c20{color:#1155cc;text-decoration:underline}.c13{padding:0;margin:0}.c24{color:inherit;text-decoration:inherit}.c22{font-weight:400;font-family:"Ubuntu Mono"}.c37{font-weight:700}.c15{height:11pt}.c28{color:#38761d}.c9{height:21pt}.c25{font-style:italic}.c1{height:0pt}.c30{color:#990000}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}</style></head><body class="c35"><h2 class="c16" id="h.9jqhdhj6vufo"><span class="c14">Goal</span></h2><p class="c8"><span class="c4">The goal of this document is to help explain the basics of a typical HTTP REST API, as well as how to use most of the Messeger&rsquo;s APIs. More detailed documentation of each API and all API parameters will typically be available elsewhere (including at the top of the API files themselves).</span></p><p class="c8 c15"><span class="c4"></span></p><h2 class="c16" id="h.jyhrdcypdfd8"><span class="c14">A Brief Introduction to an HTTP API</span></h2><p class="c8"><span class="c4">All application programming interfaces that run on the web do so over the HTTP protocol. The HTTP protocol wasn&rsquo;t designed for APIs, however, so instead most HTTP APIs are designed to try and &ldquo;fit&rdquo; with the HTTP protocol as best possible. Such APIs are typically called &ldquo;REST&rdquo; APIs (exactly what &ldquo;REST&rdquo; means doesn&rsquo;t matter -- &ldquo;REST&rdquo; is typically just used to specify certain conventions, which we&rsquo;ll talk about next).</span></p><p class="c8 c15"><span class="c4"></span></p><p class="c8"><span>A REST API first identifies resources using a standard URL format. For instance, a URL that might represent a person with the ID 1191 would be </span><span class="c20 c37"><a class="c24" href="https://www.google.com/url?q=http://example.com/api/person/1191&amp;sa=D&amp;ust=1505160590458000&amp;usg=AFQjCNGpSmqVzmKn3gd-dcI-xgfBx3KCtg">http://example.com/api/person/1191</a></span><span>. The collection of all people would be </span><span class="c20 c37"><a class="c24" href="https://www.google.com/url?q=http://example.com/api/person/1191&amp;sa=D&amp;ust=1505160590458000&amp;usg=AFQjCNGpSmqVzmKn3gd-dcI-xgfBx3KCtg">http://example.com/api/person/</a></span><span class="c4">. You can think of these as analogous to a Java Person object and a Java Person collection (i.e. Collection&lt;Person&gt;).</span></p><p class="c8 c15"><span class="c4"></span></p><p class="c8"><span>Next, REST APIs &ldquo;borrow&rdquo; HTTP&rsquo;s </span><span class="c20"><a class="c24" href="https://www.google.com/url?q=https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol%23Request_methods&amp;sa=D&amp;ust=1505160590459000&amp;usg=AFQjCNHkihuKkHx9dYzhL1rzHYj_SVcTRA">verbs</a></span><span class="c4">. An HTTP form submission supports several &ldquo;verbs&rdquo; that signify what the form is trying to accomplish. These are:</span></p><ol class="c13 lst-kix_m7dyg64omhj-0 start" start="1"><li class="c6"><span class="c2">GET</span><span class="c4">, where we are asking for information from the server.</span></li><li class="c6"><span class="c2">POST</span><span class="c4">, where we are telling the server to update existing information.</span></li><li class="c6"><span class="c2">PUT</span><span>, where we are telling the server to create new information.</span></li><li class="c6"><span class="c2">DELETE</span><span class="c4">, where we are telling the server to delete existing information.</span></li></ol><p class="c8 c15"><span class="c4"></span></p><p class="c8"><span class="c4">If we wanted to change the name of person 1191 to &ldquo;Bob&rdquo;, we would make the request:</span></p><p class="c8"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="c22">POST http://example.com/api/person/119</span><span class="c22">1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="c17">name=Bob</span></p><p class="c8 c15"><span class="c4"></span></p><p class="c8"><span class="c2">POST</span><span>&nbsp;signifies that we are updating a resource. </span><span class="c2">http://example.com/api/person/1191</span><span>&nbsp;identifies that resources. And </span><span class="c2">name=Bob</span><span>&nbsp;is the information we are changing. (I will explain why </span><span class="c2">name=Bob</span><span class="c4">&nbsp;is separate from the URL in a moment.)</span></p><p class="c8 c15"><span class="c4"></span></p><p class="c8"><span class="c4">If we wish to delete this person, we would make this request instead:</span></p><p class="c0"><span class="c17">DELETE http://example.com/api/person/1191</span></p><p class="c8 c15"><span class="c4"></span></p><p class="c8"><span class="c4">And if we wish to get information about this person, we would use this:</span></p><p class="c8"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="c17">GET http://example.com/api/person/1191</span></p><p class="c8 c15"><span class="c4"></span></p><p class="c8"><span class="c4">If we wanted to create a new person with the name of Jake, we would make this request:</span></p><p class="c8"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="c22">POST </span><span class="c22">http://example.com/api/person/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name=jake</span></p><p class="c8 c15"><span class="c4"></span></p><p class="c8"><span class="c4">And finally, if we we wanted to get information about all people, we would use:</span></p><p class="c0"><span class="c22">GET </span><span class="c22">http://example.com/api/person/</span></p><p class="c0 c15"><span class="c4"></span></p><p class="c8"><span>Typically, we can&rsquo;t </span><span class="c22">DELETE</span><span>&nbsp;or </span><span class="c22">PUT</span><span>&nbsp;on collections, because we don&rsquo;t want to delete an entire collection, nor update every member of a collection all at once. But we may want to add to a collection, and thus use </span><span class="c22">POST</span><span>, and we may want to get information about the collection, and thus use </span><span class="c22">GET</span><span class="c4">.</span></p><p class="c8 c15"><span class="c4"></span></p><p class="c8"><span>Now, when we represent the parameters in a request, we do so in the format &ldquo;</span><span class="c22">param1=data&amp;param2=moredata</span><span>&rdquo;. We will typically either include this in the URL, in which case we prefix it with a &ldquo;</span><span class="c22">?</span><span>&rdquo; and then append it to the URL (e.g. &ldquo;</span><span class="c22">example.com/</span><span class="c2">?param1=data&amp;param2=moredata</span><span class="c4">&rdquo;), or inside the HTTP request body.</span></p><p class="c8 c15"><span class="c4"></span></p><p class="c8"><span>The HTTP request body is typically just another string of parameters, and will usually only be used in POST and PUT requests to signify what information is being added or changed. When you use it, you will </span><span>usually </span><span class="c4">tell your program to put some text in the request body, and it will take care of the rest. For this document, we will represent the request body like so:</span></p><p class="c8 c15"><span class="c4"></span></p><a id="t.bfb484814ec73fae3deea2a876d26519f6265513"></a><a id="t.0"></a><table class="c29"><tbody><tr class="c1"><td class="c34" colspan="1" rowspan="1"><p class="c11"><span class="c2">POST </span><span class="c2">http://example.com/api/item/1</span><span>&nbsp;</span><span class="c32 c25">This is the URL.</span></p><p class="c11"><span class="c2">name=PaperClip&amp;cost=1.99</span><span>&nbsp;</span><span class="c25">This is the request body.</span></p></td></tr></tbody></table><p class="c8 c15"><span class="c4"></span></p><p class="c8"><span class="c4">In this request, we first identify the item with ID 1, and then tell the API to change the name of the item to &ldquo;PaperClip&rdquo; and the cost of the item to &ldquo;1.99.&rdquo; Thus, we may have parameters both in the URL (parameters that will identify a resource) and parameters in the HTTP request body (parameters that will tell the resource how to change).</span></p><h2 class="c16" id="h.xbf2wnfnukfc"><span class="c14">How Our API Works</span></h2><p class="c8"><span>Our API isn&rsquo;t a full REST API. Because PHP (and, indeed, all server languages) require all parameterised information to be part of either the URL parameters (the stuff after &ldquo;?&rdquo;) or the request body, a URL like </span><span class="c2">http://example.com/api/person</span><span class="c2 c30">/1191</span><span class="c30">&nbsp;</span><span>must be converted to </span><span class="c2">http://example.com/api/person</span><span class="c2 c28">.php?id=1191</span><span class="c4">. There are ways of configuring a server to perform these conversions automatically, but because we want the messenger to work on as many servers as possible, we are simply skipping this step, requiring API clients to perform these changes themselves.</span></p><p class="c8 c15"><span class="c4"></span></p><p class="c8"><span class="c4">For instance, the above example requests for us would instead be:</span></p><a id="t.1a589f936cea550db380d934ed80151cd8bb6717"></a><a id="t.1"></a><table class="c29"><tbody><tr class="c1"><td class="c21" colspan="1" rowspan="1"><p class="c11"><span class="c10">Change 1191&rsquo;s Name</span></p></td><td class="c27" colspan="1" rowspan="1"><p class="c8"><span class="c12">POST </span><span class="c3">http://example.com/api/person.php?id=1191</span></p><p class="c8"><span class="c3">name=Bob</span></p></td></tr><tr class="c1"><td class="c21" colspan="1" rowspan="1"><p class="c11"><span class="c10">Delete Person 1191</span></p></td><td class="c27" colspan="1" rowspan="1"><p class="c11"><span class="c3">DELETE http://example.com/api/person.php?id=1191</span></p></td></tr><tr class="c1"><td class="c21" colspan="1" rowspan="1"><p class="c11"><span class="c10">Create &ldquo;Jake&rdquo;</span></p></td><td class="c27" colspan="1" rowspan="1"><p class="c11"><span class="c3">PUT http://example.com/api/person.php</span></p><p class="c11"><span class="c3">name=jake</span></p></td></tr><tr class="c1"><td class="c21" colspan="1" rowspan="1"><p class="c11"><span class="c10">Get Info About 1191</span></p></td><td class="c27" colspan="1" rowspan="1"><p class="c11"><span class="c12">GET </span><span class="c12">http://example.com/api/person.php?id=</span><span class="c3">1191</span></p></td></tr><tr class="c1"><td class="c21" colspan="1" rowspan="1"><p class="c11"><span class="c10">Get Info About All People</span></p></td><td class="c27" colspan="1" rowspan="1"><p class="c11"><span class="c3">GET http://example.com/api/person.php</span></p></td></tr></tbody></table><p class="c8 c15"><span class="c4"></span></p><p class="c8"><span>In addition, browsers do not always support </span><span class="c22">PUT</span><span>&nbsp;and </span><span class="c22">DELETE</span><span>&nbsp;requests, nor do all servers support </span><span class="c22">PUT</span><span>&nbsp;and </span><span class="c22">DELETE</span><span>. As a result, it is also possible to specify that a request </span><span class="c25">should</span><span>&nbsp;be a </span><span class="c22">PUT</span><span>&nbsp;or </span><span class="c22">DELETE</span><span>&nbsp;request by modifying a </span><span class="c22">POST</span><span>&nbsp;request as such:</span></p><a id="t.b44c07568c418d598303ca3c260d684888d0c990"></a><a id="t.2"></a><table class="c29"><tbody><tr class="c1"><td class="c26" colspan="1" rowspan="1"><p class="c11"><span class="c10">Delete Person 1191</span></p></td><td class="c31" colspan="1" rowspan="1"><p class="c11"><span class="c3">POST http://example.com/api/person.php?_method=delete&amp;id=1191</span></p></td></tr><tr class="c1"><td class="c26" colspan="1" rowspan="1"><p class="c11"><span class="c10">Create &ldquo;Jake&rdquo;</span></p></td><td class="c31" colspan="1" rowspan="1"><p class="c11"><span class="c3">POST http://example.com/api/person.php?_method=delete</span></p><p class="c11"><span class="c3">name=jake</span></p></td></tr></tbody></table><p class="c8 c15"><span class="c4"></span></p><p class="c8"><span>Indeed, because of variable server support, general-purpose clients are encouraged to use the </span><span class="c22">_method</span><span>&nbsp;parameter with </span><span class="c22">POST</span><span>&nbsp;requests to simulate </span><span class="c22">POST</span><span>, </span><span class="c22">PUT</span><span>, and </span><span class="c22">DELETE</span><span class="c4">&nbsp;actions.</span></p><p class="c8 c15"><span class="c4"></span></p><p class="c8"><span>In addition, for simplicity, it may be possible to undo a </span><span class="c22">DELETE</span><span>&nbsp;request with </span><span class="c2">_method=undelete</span><span class="c4">. Since no corresponding HTTP method exists, this is the only way to undelete an item:</span></p><a id="t.7801e0cc5e95a96845be1a6e1eb808e730b9c5ce"></a><a id="t.3"></a><table class="c29"><tbody><tr class="c1"><td class="c26" colspan="1" rowspan="1"><p class="c11"><span class="c10">Undelete Person 1191</span></p></td><td class="c31" colspan="1" rowspan="1"><p class="c11"><span class="c3">POST http://example.com/api/person.php?_method=undelete&amp;id=1191</span></p></td></tr></tbody></table><p class="c8 c15"><span class="c4"></span></p><h3 class="c19" id="h.37wh3gbbx2zl"><span class="c23">Login</span></h3><p class="c8"><span class="c4">Before any API can be used, a session token must be obtained using the validate.php API.</span></p><p class="c8 c15"><span class="c4"></span></p><a id="t.51b6ae4d96e9507a26ea5d6ad0b74923b292ddb2"></a><a id="t.4"></a><table class="c29"><tbody><tr class="c1"><td class="c34" colspan="1" rowspan="1"><p class="c8"><span class="c17">validate.php</span></p><p class="c8"><span class="c2">username</span><span class="c22">=&amp;</span><span class="c2">password</span><span class="c22">=&amp;</span><span class="c2">grant_type</span><span class="c22">=password&amp;</span><span class="c2">client_id</span><span class="c17">=</span></p></td></tr></tbody></table><p class="c8 c15"><span class="c4"></span></p><p class="c8"><span>All four of these parameters are required. Username and password are the user&rsquo;s username and password, </span><span class="c22">grant_type</span><span>&nbsp;will typically be set to </span><span class="c2">password</span><span>, and </span><span class="c22">client_id</span><span class="c4">&nbsp;is the OAuth2 client ID of your client. (At present, OAuth2 client IDs cannot be registered; use &ldquo;WebPro&rdquo; in the meantime.)</span></p><p class="c8 c15"><span class="c4"></span></p><p class="c8"><span>The response JSON will include </span><span class="c2">access_token</span><span>, whose valu</span><span>e must be passed as the </span><span class="c2">access_token</span><span>&nbsp;parameter in all other API requests.</span></p><p class="c8 c15"><span class="c4"></span></p><h2 class="c16" id="h.w1e9ylhjhoto"><span class="c14">Exception Handling</span></h2><h3 class="c19" id="h.s9shhsgpxrg7"><span class="c23">Login Expired Response</span></h3><p class="c8"><span class="c4">Any request may respond with a login expired response, in this format:</span></p><p class="c8"><span class="c17">{&ldquo;loginExpired&rdquo;, &ldquo;The session token you have used is no longer valid. Please obtain a new session token.&rdquo;}</span></p><p class="c8 c15"><span class="c4"></span></p><p class="c8"><span class="c4">When this happens, the application should obtain a new session token through validate.php and then retry the request.</span></p><p class="c8 c15"><span class="c4"></span></p><h3 class="c19" id="h.cfkw4dxytgpp"><span class="c23">Captcha Responses</span></h3><p class="c8"><span class="c4">Any request may respond with a &ldquo;captcha&rdquo;, in this format:</span></p><p class="c8"><span class="c17">{&ldquo;caption&rdquo; : {</span></p><p class="c8"><span class="c22">&nbsp; &nbsp; &ldquo;url&rdquo; : &ldquo;</span><span class="c17">/captcha.php?id=x&rdquo;</span></p><p class="c8"><span class="c17">}}</span></p><p class="c8 c15"><span class="c4"></span></p><p class="c8"><span>When this happens, the application must display the captcha embedded in the given URL.</span><sup><a href="#cmnt1" id="cmnt_ref1">[a]</a></sup><sup><a href="#cmnt2" id="cmnt_ref2">[b]</a></sup><sup><a href="#cmnt3" id="cmnt_ref3">[c]</a></sup><span class="c4">&nbsp;Upon submission, the embedded page will either redirect to a new captcha (if the previous one failed), or to the original request, now completed.</span></p><p class="c8 c15"><span class="c4"></span></p><h3 class="c19" id="h.hfsyn5j43dbx"><span class="c23">Other Exceptions</span></h3><p class="c8"><span class="c4">Every API request will return its errors in the same format:</span></p><p class="c8"><span class="c17">{&quot;exception&quot; : {</span></p><p class="c8"><span class="c17">&nbsp; &nbsp; &quot;string&quot; &nbsp;: &quot;ERROR_CODE&quot;,</span></p><p class="c8"><span class="c17">&nbsp; &nbsp; &quot;details&quot; : &quot;ERROR_MESSAGE&quot;</span></p><p class="c8"><span class="c22">}}</span></p><p class="c8 c15"><span class="c4"></span></p><p class="c8"><span>Where &ldquo;</span><span class="c22">ERROR_CODE</span><span>&rdquo; is a shortened string describing the problem (e.g. &ldquo;</span><span class="c22">idMissing</span><span>&rdquo;), and &ldquo;</span><span class="c22">ERROR_MESSAGE</span><span>&rdquo; is a longer english-language description that is directed either towards the client developer (in cases of client error), the client user (in cases of the user inputting incorrect data), or the software developer (in cases of backend software failure). Typically, an internal software error will return with </span><span class="c2">HTTP/1.1 500 Internal Server Error</span><span class="c22">.</span></p><p class="c8 c15"><span class="c4"></span></p><p class="c8"><span>In most cases, client developer and client user errors are documented alongside each API. Switch on the error code to display a customised message, or simply display the error message, which will many times be sufficient. (Of-course, since the backend only communicates English-language messages, switching on the error code is necessary for non-English frontends). Notably, while the code should not change between software revisions, the error message may well.</span></p><p class="c8 c15"><span class="c4"></span></p><p class="c8"><span>Perhaps frustratingly, not every error code uses the same style; some are camel case, eithers use underscores. This is a consequence of </span><span>FreezeMessenger </span><span class="c4">using third-party libraries with different conventions; we make an effort to ensure that all codes are returned in the standard exception structure, but the codes themselves can wildly different.</span></p><p class="c8 c15"><span class="c4"></span></p><h3 class="c19" id="h.ddv3ad112ds3"><span class="c23">Common Exceptions</span></h3><p class="c8"><span class="c4">The following is a list of common exception codes that any API may return:</span></p><ol class="c13 lst-kix_bb0i0yks2vgs-0 start" start="1"><li class="c6"><span class="c2">{parameter}Required</span><span class="c4">&nbsp;- The parameter named &ldquo;parameter&rdquo; was not provided, but must be used. Retry the request with &ldquo;parameter&rdquo; included.</span></li><li class="c6"><span class="c2">{parameter}Invalid</span><span class="c4">&nbsp;- The parameter named &ldquo;parameter&rdquo; is invalid, or does not correspond with a valid object.</span></li><li class="c6"><span class="c2">noPerm</span><span>&nbsp;- The logged-in user does not have permission to perform the attempted task. This will also respond with the header </span><span class="c2">HTTP/1.1 403 Forbidden</span><span class="c4">.</span></li><li class="c6"><span class="c2">flood</span><span>&nbsp;- The IP being used to perform the request has made too many similar requests. Please wait before making additional requests of the same nature. This will also respond with the header </span><span class="c2">HTTP/1.1 429 Too Many Requests</span><span class="c4">.</span></li></ol><p class="c8 c15"><span class="c4"></span></p><h2 class="c16" id="h.mhery8i1gy22"><span class="c14">Our API Objects</span></h2><h3 class="c19" id="h.vntf3w9yesc4"><span class="c23">Common Parameters</span></h3><p class="c8"><span class="c4">The following is a list of common parameters that may be used with (almost) all APIs. They must be part of the URL parameters.</span></p><ul class="c13 lst-kix_mbonxrnmfpf7-0 start"><li class="c6"><span class="c2">access_token</span><span class="c4">&nbsp;- The access token generated by validate.php.</span></li><li class="c6"><span class="c2">fim3_format</span><span>&nbsp;- The format output should be in. </span><span class="c2">json</span><span>&nbsp;is default, while </span><span class="c2">jsonp</span><span>&nbsp;(using the root function </span><span class="c2">fim_jsonp.parse</span><span>) and </span><span class="c2">phparray</span><span>&nbsp;(which simply uses </span><span class="c2 c20"><a class="c24" href="https://www.google.com/url?q=http://php.net/manual/en/function.print-r.php&amp;sa=D&amp;ust=1505160590489000&amp;usg=AFQjCNG2cYg6QCJQYjMpEEKmFNy0gsS4NA">print_r</a></span><span>) are also supported. </span><span class="c2">xml</span><span>&nbsp;and </span><span class="c2">yaml</span><span class="c4">&nbsp;may be supported in the future.</span></li></ul><p class="c8 c15"><span class="c4"></span></p><h3 class="c19" id="h.obx4hcd23lhj"><span class="c23">Parameter Formats</span></h3><p class="c8"><span class="c4">The following is a list of formats that parameters can take. We identify the format of every parameter in the parameter documentation.</span></p><ul class="c13 lst-kix_9hmiem2jmh15-0 start"><li class="c6"><span class="c2">int</span><span>&nbsp;- A normal integer. Use a string consisting only of decimals. E.g.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="c17">integer=22</span></li><li class="c6"><span class="c2">float</span><span>&nbsp;- Possibly unused, but reserved for real numbers. E.g.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="c17">float=2.2</span></li><li class="c6"><span class="c2">string</span><span>&nbsp;- A regular string. Anything is allowed, as long as it is properly escaped for the HTTP request, e.g.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="c17">item=hello%20gov&rsquo;ner</span></li><li class="c6"><span class="c2">ascii128</span><span class="c4">&nbsp;- A restricted string that should only be composed of alphanumeric characters and common punctuation.</span></li><li class="c6"><span class="c2">bool</span><span>&nbsp;- A boolean. Use the string &ldquo;1&rdquo; for true, and &ldquo;0&rdquo; for false, e.g.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="c17">true=1&amp;false=0</span></li><li class="c6"><span class="c2">list</span><span>&nbsp;- A list, often (but not always) restricted to integer values or predefined string literals. Use HTTP array notation, e.g.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="c17">item[]=1&amp;item[]=2</span></li><li class="c6"><span class="c2">dict</span><span>&nbsp;- A dictionary. Use HTTP associative array notation, e.g.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="c17">item[key1]=val1&amp;item[key2]=val2</span></li><li class="c6"><span class="c2">json</span><span>&nbsp;- A JSON-encoded string. Used very, very rarely when multidimensional information must be uploaded. E.g.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="c17">tree={1:{1,2},2:{3,4:{5,&rdquo;a&rdquo;}}}</span></li><li class="c6"><span class="c2">timestamp</span><span>&nbsp;- An integer corresponding with a UNIX timestamp. In most cases, this will be 32-bits, e.g.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="c17">time=1504212915</span></li><li class="c6"><span class="c2">roomid</span><span>&nbsp;- A special ID used exclusively by rooms. It will be a regular integer for normal rooms, a string in the format &ldquo;p1,2,3&rdquo; for private rooms (in this case, between the users with IDs 1, 2, and 3), and a string in the format &ldquo;o1,2,3&rdquo; for off-the-record rooms. E.g.:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="c17">roomId=p1,2,3</span></li></ul><h3 class="c19" id="h.7j54yoaepbw4"><span>Messages</span></h3><p class="c8"><span>In a traditional REST API, the message resource for message ID 1 in room ID 1 would be </span><span class="c2">http://example.com/api/room/1/message/1/</span><span>. For us, it is </span><span class="c2">http://example.com/api/message.php?roomId=1&amp;id=1</span><span class="c4">.</span></p><a id="t.7dded911895b2563221cfa11f451ccd6768d1261"></a><a id="t.5"></a><table class="c29"><tbody><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Edit Message 1 in Room 1</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c8"><span class="c12">POST </span><span class="c12">http://example.com/api/message.php?roomId=1&amp;id=1</span></p><p class="c8"><span class="c3">text=HelloWorld</span></p></td></tr><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Delete Message 1 in Room 1</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c11"><span class="c3">DELETE http://example.com/api/message.php?roomId=1&amp;id=1</span></p></td></tr><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Create &ldquo;HelloWorld&rdquo; Message in Room 1</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c11"><span class="c12">PUT </span><span class="c12">http://example.com/api/message.php?roomId=1</span></p><p class="c11"><span class="c3">name=jake</span></p></td></tr><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Get Message ID 1 in Room 1</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c11"><span class="c12">GET http://example.com/api/message.php?roomId=1&amp;id=1</span></p></td></tr><tr class="c9"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Get Messages in Room 1</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c11"><span class="c12">GET </span><span class="c12">http://example.com/api/message.php?roomId=1</span></p></td></tr><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Get Messages Since Message ID 3 in Room 1</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c11"><span class="c3">GET http://example.com/api/message.php?lastMessage=3&amp;roomId=1</span></p></td></tr></tbody></table><p class="c8 c15"><span class="c4"></span></p><h3 class="c19" id="h.amdtbgv4r696"><span class="c23">Rooms</span></h3><p class="c8"><span>In a traditional REST API, the message resource for room ID 1 would be </span><span class="c2">http://example.com/api/room/1/</span><span>. For us, it is </span><span class="c2">http://example.com/api/room.php?id=1</span><span class="c4">.</span></p><a id="t.6db8b020094b007eb7c4647e8d9768821a7b506a"></a><a id="t.6"></a><table class="c29"><tbody><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Edit Room 1</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c8"><span class="c3">POST http://example.com/api/room.php?id=1</span></p><p class="c8"><span class="c3">name=MainRoom</span></p></td></tr><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Delete Room 1</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c11"><span class="c3">DELETE http://example.com/api/room.php?id=1</span></p></td></tr><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Create New Room</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c11"><span class="c3">PUT http://example.com/api/room.php</span></p><p class="c11"><span class="c12">name=MainRoom</span></p></td></tr><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Get Room ID 1</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c11"><span class="c3">GET http://example.com/api/room.php?id=1</span></p></td></tr><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Get Rooms</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c11"><span class="c3">GET http://example.com/api/room.php</span></p></td></tr><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Message Collection</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c11"><span class="c12 c25 c36">See Message API.</span></p></td></tr></tbody></table><p class="c8 c15"><span class="c4"></span></p><h3 class="c19" id="h.dumu015ap7m5"><span>Users</span></h3><p class="c8"><span>In a traditional REST API, the message resource for user ID 1 would be </span><span class="c2">http://example.com/api/user/1/</span><span>. For us, it is </span><span class="c2">http://example.com/api/user.php?id=1</span><span class="c4">. Note as well that:</span></p><ul class="c13 lst-kix_2ohqr9ohdjgh-0 start"><li class="c6"><span class="c4">The edit user operation does not identify the user by ID -- the user being edited will be whichever user is currently logged-in.</span></li><li class="c6"><span>The create new user API should be avoided if possible. </span><span class="c22">http://example.com/register/</span><span class="c4">&nbsp;is a special frontend intended for user registration.</span></li></ul><p class="c8 c15"><span class="c4"></span></p><a id="t.4bb05eb15550f3645c7fe6a86bffb00ae4190a33"></a><a id="t.7"></a><table class="c29"><tbody><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Edit User</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c8"><span class="c12">POST </span><span class="c12">http://example.com/api/user</span><span class="c3">.php</span></p><p class="c8"><span class="c3">avatar=image.jpg</span></p></td></tr><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Delete User</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c11"><span class="c12 c25">Not supported.</span></p></td></tr><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Create New User</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c11"><span class="c12">PUT </span><span class="c12">http://example.com/api/user</span><span class="c3">.php</span></p><p class="c11"><span class="c3">name=Admin</span></p></td></tr><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Get User ID 1</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c11"><span class="c12">GET </span><span class="c12">http://example.com/api/user</span><span class="c3">.php?id=1</span></p></td></tr><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Get Users</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c11"><span class="c12">GET </span><span class="c12">http://example.com/api/user</span><span class="c3">.php</span></p></td></tr></tbody></table><p class="c8 c15"><span class="c4"></span></p><h3 class="c19" id="h.si5jlf965hrm"><span class="c23">User Activity (TODO)</span></h3><p class="c8"><span>In a traditional rest API, the activity resource for room ID 1 might be something like </span><span class="c2">http://example.com/api/room/1/userStatus</span><span>. For us, it is </span><span class="c2">http://example.com/api/userStatus.php?roomIds[]=1</span><span class="c4">.<br></span></p><a id="t.1fdf7103c1912c67a011b7b25cf448488b92b1ec"></a><a id="t.8"></a><table class="c29"><tbody><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Update Status</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c11"><span class="c3">POST http://example.com/api/userStatus.php</span></p><p class="c11"><span class="c3">status=online</span></p></td></tr><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Update Status in Room 1</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c11"><span class="c3">POST http://example.com/api/userStatus.php</span></p><p class="c11"><span class="c3">status=online&amp;roomIds[]=1</span></p></td></tr><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Get User 1&rsquo;s Status</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c11"><span class="c3">GET http://example.com/api/userStatus.php?userIds[]=1</span></p></td></tr><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Get All Users in Room 1&rsquo;s Status</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c11"><span class="c3">GET http://example.com/api/userStatus.php?roomIds[]=1</span></p></td></tr><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Get All Users in All Rooms Status</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c11"><span class="c3">GET http://example.com/api/userStatus.php</span></p></td></tr></tbody></table><p class="c8 c15"><span class="c4"></span></p><h3 class="c19" id="h.mpuitflv8y2z"><span>Files (</span><span>TODO</span><span class="c23">)</span></h3><a id="t.8ae9fc338c6f4624c74961d4e5fc18fede263f4e"></a><a id="t.9"></a><table class="c29"><tbody><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Edit File 1</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c8"><span class="c12">PUT </span><span class="c12">http://example.com/api/file</span><span class="c3">.php?id=1</span></p><p class="c8"><span class="c3">{fileContent}</span></p></td></tr><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Delete File 1</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c11"><span class="c12">DELETE </span><span class="c12">http://example.com/api/file</span><span class="c3">.php?id=1</span></p></td></tr><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Create New File</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c11"><span class="c12">PUT </span><span class="c12">http://example.com/api/file</span><span class="c3">.php</span></p><p class="c11"><span class="c3">{fileContent}</span></p></td></tr><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Get File 1</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c11"><span class="c12">GET </span><span class="c12">http://example.com/api/file</span><span class="c3">.php?id=1</span></p></td></tr><tr class="c1"><td class="c5" colspan="1" rowspan="1"><p class="c11"><span class="c10">Get User&rsquo;s Files</span></p></td><td class="c7" colspan="1" rowspan="1"><p class="c11"><span class="c12">GET </span><span class="c12">http://example.com/api/file</span><span class="c3">.php</span></p></td></tr></tbody></table><p class="c8 c15"><span class="c4"></span></p><div class="c33"><p class="c11"><a href="#cmnt_ref1" id="cmnt1">[a]</a><span class="c4">JavaFX includes WebView for this purpose.</span></p></div><div class="c33"><p class="c11"><a href="#cmnt_ref2" id="cmnt2">[b]</a><span class="c4">https://stackoverflow.com/a/36322320/3500150 for monitoring URL changes.</span></p></div><div class="c33"><p class="c11"><a href="#cmnt_ref3" id="cmnt3">[c]</a><span class="c4">https://stackoverflow.com/a/36322320/3500150 for monitoring URL changes.</span></p></div></body></html>