<html><head><meta content="text/html; charset=UTF-8" http-equiv="content-type"><style type="text/css">ul.lst-kix_s3nigs7r3it4-0{list-style-type:none}ul.lst-kix_s3nigs7r3it4-5{list-style-type:none}ul.lst-kix_s3nigs7r3it4-6{list-style-type:none}ul.lst-kix_s3nigs7r3it4-7{list-style-type:none}ul.lst-kix_s3nigs7r3it4-8{list-style-type:none}ul.lst-kix_s3nigs7r3it4-1{list-style-type:none}.lst-kix_ikallxus7lnc-0>li:before{content:"\0025cf  "}.lst-kix_ikallxus7lnc-1>li:before{content:"\0025cb  "}ul.lst-kix_s3nigs7r3it4-2{list-style-type:none}ul.lst-kix_s3nigs7r3it4-3{list-style-type:none}ul.lst-kix_s3nigs7r3it4-4{list-style-type:none}.lst-kix_vv2etzvoc5tf-0>li:before{content:"" counter(lst-ctn-kix_vv2etzvoc5tf-0,decimal) ". "}.lst-kix_wqmsnxqiutdl-1>li{counter-increment:lst-ctn-kix_wqmsnxqiutdl-1}ul.lst-kix_dk23tkuz99tr-7{list-style-type:none}.lst-kix_vv2etzvoc5tf-4>li:before{content:"" counter(lst-ctn-kix_vv2etzvoc5tf-4,lower-latin) ". "}.lst-kix_vv2etzvoc5tf-6>li:before{content:"" counter(lst-ctn-kix_vv2etzvoc5tf-6,decimal) ". "}ul.lst-kix_dk23tkuz99tr-8{list-style-type:none}.lst-kix_vv2etzvoc5tf-1>li:before{content:"" counter(lst-ctn-kix_vv2etzvoc5tf-1,lower-latin) ". "}.lst-kix_vv2etzvoc5tf-5>li:before{content:"" counter(lst-ctn-kix_vv2etzvoc5tf-5,lower-roman) ". "}ul.lst-kix_dk23tkuz99tr-1{list-style-type:none}ul.lst-kix_dk23tkuz99tr-2{list-style-type:none}.lst-kix_vv2etzvoc5tf-2>li:before{content:"" counter(lst-ctn-kix_vv2etzvoc5tf-2,lower-roman) ". "}ul.lst-kix_dk23tkuz99tr-0{list-style-type:none}ol.lst-kix_wqmsnxqiutdl-1.start{counter-reset:lst-ctn-kix_wqmsnxqiutdl-1 0}ul.lst-kix_dk23tkuz99tr-5{list-style-type:none}ul.lst-kix_dk23tkuz99tr-6{list-style-type:none}ul.lst-kix_dk23tkuz99tr-3{list-style-type:none}.lst-kix_vv2etzvoc5tf-3>li:before{content:"" counter(lst-ctn-kix_vv2etzvoc5tf-3,decimal) ". "}ul.lst-kix_dk23tkuz99tr-4{list-style-type:none}.lst-kix_vv2etzvoc5tf-1>li{counter-increment:lst-ctn-kix_vv2etzvoc5tf-1}.lst-kix_n33gkxdehakt-2>li{counter-increment:lst-ctn-kix_n33gkxdehakt-2}.lst-kix_vv2etzvoc5tf-8>li:before{content:"" counter(lst-ctn-kix_vv2etzvoc5tf-8,lower-roman) ". "}.lst-kix_vv2etzvoc5tf-7>li:before{content:"" counter(lst-ctn-kix_vv2etzvoc5tf-7,lower-latin) ". "}.lst-kix_n52a1wwuvb9p-4>li{counter-increment:lst-ctn-kix_n52a1wwuvb9p-4}ol.lst-kix_vv2etzvoc5tf-7.start{counter-reset:lst-ctn-kix_vv2etzvoc5tf-7 0}ul.lst-kix_ikallxus7lnc-8{list-style-type:none}ul.lst-kix_ikallxus7lnc-4{list-style-type:none}ul.lst-kix_ikallxus7lnc-5{list-style-type:none}ul.lst-kix_ikallxus7lnc-6{list-style-type:none}ul.lst-kix_ikallxus7lnc-7{list-style-type:none}ul.lst-kix_ikallxus7lnc-0{list-style-type:none}ul.lst-kix_ikallxus7lnc-1{list-style-type:none}ul.lst-kix_8pk9hjreqo2y-0{list-style-type:none}ul.lst-kix_ikallxus7lnc-2{list-style-type:none}ul.lst-kix_ikallxus7lnc-3{list-style-type:none}ol.lst-kix_n52a1wwuvb9p-1{list-style-type:none}ol.lst-kix_n52a1wwuvb9p-0{list-style-type:none}ol.lst-kix_n52a1wwuvb9p-7{list-style-type:none}.lst-kix_aahkimjpt9di-0>li{counter-increment:lst-ctn-kix_aahkimjpt9di-0}ol.lst-kix_n52a1wwuvb9p-6{list-style-type:none}ol.lst-kix_wqmsnxqiutdl-8.start{counter-reset:lst-ctn-kix_wqmsnxqiutdl-8 0}ol.lst-kix_n52a1wwuvb9p-8{list-style-type:none}ol.lst-kix_n52a1wwuvb9p-3{list-style-type:none}ol.lst-kix_n52a1wwuvb9p-2{list-style-type:none}ol.lst-kix_n52a1wwuvb9p-5{list-style-type:none}ol.lst-kix_n52a1wwuvb9p-4{list-style-type:none}ul.lst-kix_sd321hhkupl9-2{list-style-type:none}ul.lst-kix_sd321hhkupl9-1{list-style-type:none}ul.lst-kix_sd321hhkupl9-0{list-style-type:none}ul.lst-kix_sd321hhkupl9-6{list-style-type:none}ul.lst-kix_sd321hhkupl9-5{list-style-type:none}ul.lst-kix_sd321hhkupl9-4{list-style-type:none}.lst-kix_n33gkxdehakt-6>li{counter-increment:lst-ctn-kix_n33gkxdehakt-6}ul.lst-kix_sd321hhkupl9-3{list-style-type:none}.lst-kix_ikallxus7lnc-7>li:before{content:"\0025cb  "}ul.lst-kix_sd321hhkupl9-8{list-style-type:none}ul.lst-kix_sd321hhkupl9-7{list-style-type:none}.lst-kix_ikallxus7lnc-8>li:before{content:"\0025a0  "}ul.lst-kix_8pk9hjreqo2y-3{list-style-type:none}.lst-kix_ikallxus7lnc-2>li:before{content:"\0025a0  "}.lst-kix_ikallxus7lnc-3>li:before{content:"\0025cf  "}ul.lst-kix_8pk9hjreqo2y-4{list-style-type:none}ul.lst-kix_8pk9hjreqo2y-1{list-style-type:none}ul.lst-kix_8pk9hjreqo2y-2{list-style-type:none}ul.lst-kix_8pk9hjreqo2y-7{list-style-type:none}ul.lst-kix_8pk9hjreqo2y-8{list-style-type:none}ul.lst-kix_8pk9hjreqo2y-5{list-style-type:none}.lst-kix_hylja30iez6-0>li{counter-increment:lst-ctn-kix_hylja30iez6-0}ul.lst-kix_8pk9hjreqo2y-6{list-style-type:none}.lst-kix_ikallxus7lnc-6>li:before{content:"\0025cf  "}.lst-kix_ikallxus7lnc-4>li:before{content:"\0025cb  "}.lst-kix_ikallxus7lnc-5>li:before{content:"\0025a0  "}ol.lst-kix_vv2etzvoc5tf-0.start{counter-reset:lst-ctn-kix_vv2etzvoc5tf-0 0}.lst-kix_n52a1wwuvb9p-7>li{counter-increment:lst-ctn-kix_n52a1wwuvb9p-7}.lst-kix_aahkimjpt9di-7>li:before{content:"" counter(lst-ctn-kix_aahkimjpt9di-7,lower-latin) ". "}ol.lst-kix_n33gkxdehakt-1.start{counter-reset:lst-ctn-kix_n33gkxdehakt-1 0}.lst-kix_o7k5zfebgz8f-0>li:before{content:"\0025cf  "}.lst-kix_iaipzzw60p4p-1>li:before{content:"\0025cb  "}.lst-kix_dk23tkuz99tr-7>li:before{content:"\0025cb  "}ol.lst-kix_wqmsnxqiutdl-3.start{counter-reset:lst-ctn-kix_wqmsnxqiutdl-3 0}.lst-kix_dk23tkuz99tr-1>li:before{content:"\0025cb  "}.lst-kix_dk23tkuz99tr-3>li:before{content:"\0025cf  "}.lst-kix_iaipzzw60p4p-5>li:before{content:"\0025a0  "}.lst-kix_aqcs43vz8afa-8>li:before{content:"\0025a0  "}.lst-kix_dk23tkuz99tr-5>li:before{content:"\0025a0  "}ol.lst-kix_hylja30iez6-0.start{counter-reset:lst-ctn-kix_hylja30iez6-0 0}.lst-kix_iaipzzw60p4p-3>li:before{content:"\0025cf  "}.lst-kix_aqcs43vz8afa-6>li:before{content:"\0025cf  "}ul.lst-kix_kc6yd44ledkb-8{list-style-type:none}.lst-kix_aqcs43vz8afa-0>li:before{content:"\0025cf  "}.lst-kix_aqcs43vz8afa-4>li:before{content:"\0025cb  "}ol.lst-kix_aahkimjpt9di-3.start{counter-reset:lst-ctn-kix_aahkimjpt9di-3 0}.lst-kix_iaipzzw60p4p-7>li:before{content:"\0025cb  "}.lst-kix_aqcs43vz8afa-2>li:before{content:"\0025a0  "}.lst-kix_n33gkxdehakt-4>li:before{content:"" counter(lst-ctn-kix_n33gkxdehakt-4,lower-latin) ". "}.lst-kix_qzesqvrtujvq-1>li:before{content:"\0025cb  "}.lst-kix_40f6n3ltgi70-2>li:before{content:"\0025a0  "}ul.lst-kix_kc6yd44ledkb-2{list-style-type:none}.lst-kix_n33gkxdehakt-0>li:before{content:"" counter(lst-ctn-kix_n33gkxdehakt-0,decimal) ". "}.lst-kix_n33gkxdehakt-8>li:before{content:"" counter(lst-ctn-kix_n33gkxdehakt-8,lower-roman) ". "}ul.lst-kix_kc6yd44ledkb-3{list-style-type:none}ul.lst-kix_kc6yd44ledkb-0{list-style-type:none}ul.lst-kix_kc6yd44ledkb-1{list-style-type:none}.lst-kix_40f6n3ltgi70-0>li:before{content:"\0025cf  "}ul.lst-kix_kc6yd44ledkb-6{list-style-type:none}.lst-kix_n33gkxdehakt-2>li:before{content:"" counter(lst-ctn-kix_n33gkxdehakt-2,lower-roman) ". "}.lst-kix_jaqdxbe30fam-8>li:before{content:"\0025a0  "}ul.lst-kix_kc6yd44ledkb-7{list-style-type:none}.lst-kix_wqmsnxqiutdl-5>li{counter-increment:lst-ctn-kix_wqmsnxqiutdl-5}ul.lst-kix_kc6yd44ledkb-4{list-style-type:none}ul.lst-kix_kc6yd44ledkb-5{list-style-type:none}.lst-kix_40f6n3ltgi70-6>li:before{content:"\0025cf  "}.lst-kix_jaqdxbe30fam-6>li:before{content:"\0025cf  "}.lst-kix_aahkimjpt9di-7>li{counter-increment:lst-ctn-kix_aahkimjpt9di-7}.lst-kix_40f6n3ltgi70-4>li:before{content:"\0025cb  "}.lst-kix_jaqdxbe30fam-4>li:before{content:"\0025cb  "}.lst-kix_8pk9hjreqo2y-8>li:before{content:"\0025a0  "}.lst-kix_8pk9hjreqo2y-2>li:before{content:"\0025a0  "}ol.lst-kix_wqmsnxqiutdl-6.start{counter-reset:lst-ctn-kix_wqmsnxqiutdl-6 0}.lst-kix_vv2etzvoc5tf-2>li{counter-increment:lst-ctn-kix_vv2etzvoc5tf-2}.lst-kix_jaqdxbe30fam-2>li:before{content:"\0025a0  "}.lst-kix_8pk9hjreqo2y-6>li:before{content:"\0025cf  "}ol.lst-kix_aahkimjpt9di-1.start{counter-reset:lst-ctn-kix_aahkimjpt9di-1 0}.lst-kix_40f6n3ltgi70-8>li:before{content:"\0025a0  "}.lst-kix_jaqdxbe30fam-0>li:before{content:"\0025cf  "}.lst-kix_8pk9hjreqo2y-4>li:before{content:"\0025cb  "}ul.lst-kix_iaipzzw60p4p-4{list-style-type:none}ul.lst-kix_iaipzzw60p4p-3{list-style-type:none}.lst-kix_aahkimjpt9di-5>li:before{content:"" counter(lst-ctn-kix_aahkimjpt9di-5,lower-roman) ". "}ul.lst-kix_iaipzzw60p4p-6{list-style-type:none}ul.lst-kix_iaipzzw60p4p-5{list-style-type:none}ul.lst-kix_iaipzzw60p4p-0{list-style-type:none}ul.lst-kix_iaipzzw60p4p-2{list-style-type:none}ul.lst-kix_iaipzzw60p4p-1{list-style-type:none}.lst-kix_aahkimjpt9di-1>li:before{content:"" counter(lst-ctn-kix_aahkimjpt9di-1,lower-latin) ". "}.lst-kix_n52a1wwuvb9p-0>li{counter-increment:lst-ctn-kix_n52a1wwuvb9p-0}.lst-kix_n33gkxdehakt-6>li:before{content:"" counter(lst-ctn-kix_n33gkxdehakt-6,decimal) ". "}.lst-kix_aahkimjpt9di-3>li:before{content:"" counter(lst-ctn-kix_aahkimjpt9di-3,decimal) ". "}.lst-kix_8pk9hjreqo2y-0>li:before{content:"\0025cf  "}.lst-kix_vv2etzvoc5tf-8>li{counter-increment:lst-ctn-kix_vv2etzvoc5tf-8}.lst-kix_brdv78mcwj2k-8>li:before{content:"\0025a0  "}.lst-kix_n52a1wwuvb9p-1>li{counter-increment:lst-ctn-kix_n52a1wwuvb9p-1}.lst-kix_wqmsnxqiutdl-2>li{counter-increment:lst-ctn-kix_wqmsnxqiutdl-2}.lst-kix_n33gkxdehakt-1>li{counter-increment:lst-ctn-kix_n33gkxdehakt-1}ul.lst-kix_iaipzzw60p4p-8{list-style-type:none}ul.lst-kix_iaipzzw60p4p-7{list-style-type:none}ol.lst-kix_n33gkxdehakt-8.start{counter-reset:lst-ctn-kix_n33gkxdehakt-8 0}.lst-kix_s3nigs7r3it4-6>li:before{content:"\0025cf  "}.lst-kix_brdv78mcwj2k-4>li:before{content:"\0025cb  "}.lst-kix_brdv78mcwj2k-1>li:before{content:"\0025cb  "}.lst-kix_brdv78mcwj2k-5>li:before{content:"\0025a0  "}ul.lst-kix_hylja30iez6-3{list-style-type:none}ul.lst-kix_hylja30iez6-2{list-style-type:none}ul.lst-kix_hylja30iez6-5{list-style-type:none}ul.lst-kix_hylja30iez6-4{list-style-type:none}ul.lst-kix_hylja30iez6-7{list-style-type:none}ul.lst-kix_hylja30iez6-6{list-style-type:none}ul.lst-kix_hylja30iez6-8{list-style-type:none}.lst-kix_kc6yd44ledkb-2>li:before{content:"\0025a0  "}.lst-kix_kc6yd44ledkb-1>li:before{content:"\0025cb  "}.lst-kix_s3nigs7r3it4-5>li:before{content:"\0025a0  "}ol.lst-kix_wqmsnxqiutdl-4.start{counter-reset:lst-ctn-kix_wqmsnxqiutdl-4 0}ul.lst-kix_hylja30iez6-1{list-style-type:none}.lst-kix_aahkimjpt9di-8>li{counter-increment:lst-ctn-kix_aahkimjpt9di-8}.lst-kix_s3nigs7r3it4-1>li:before{content:"\0025cb  "}.lst-kix_s3nigs7r3it4-2>li:before{content:"\0025a0  "}.lst-kix_wuz3by2qjq9-0>li:before{content:"\0025cf  "}.lst-kix_qzesqvrtujvq-2>li:before{content:"\0025a0  "}.lst-kix_uvlrkeeima8c-5>li:before{content:"\0025a0  "}.lst-kix_wuz3by2qjq9-1>li:before{content:"\0025cb  "}.lst-kix_fsy5zudt2vbw-2>li:before{content:"\0025a0  "}.lst-kix_fsy5zudt2vbw-1>li:before{content:"\0025cb  "}ol.lst-kix_n33gkxdehakt-3.start{counter-reset:lst-ctn-kix_n33gkxdehakt-3 0}.lst-kix_qzesqvrtujvq-5>li:before{content:"\0025a0  "}.lst-kix_wuz3by2qjq9-4>li:before{content:"\0025cb  "}.lst-kix_qzesqvrtujvq-6>li:before{content:"\0025cf  "}.lst-kix_wuz3by2qjq9-5>li:before{content:"\0025a0  "}.lst-kix_wqmsnxqiutdl-0>li{counter-increment:lst-ctn-kix_wqmsnxqiutdl-0}.lst-kix_uvlrkeeima8c-4>li:before{content:"\0025cb  "}.lst-kix_n52a1wwuvb9p-5>li{counter-increment:lst-ctn-kix_n52a1wwuvb9p-5}.lst-kix_uvlrkeeima8c-1>li:before{content:"\0025cb  "}.lst-kix_wqmsnxqiutdl-4>li{counter-increment:lst-ctn-kix_wqmsnxqiutdl-4}ul.lst-kix_o7k5zfebgz8f-6{list-style-type:none}ul.lst-kix_o7k5zfebgz8f-5{list-style-type:none}.lst-kix_uvlrkeeima8c-0>li:before{content:"\0025cf  "}ul.lst-kix_o7k5zfebgz8f-8{list-style-type:none}.lst-kix_vv2etzvoc5tf-0>li{counter-increment:lst-ctn-kix_vv2etzvoc5tf-0}ul.lst-kix_o7k5zfebgz8f-7{list-style-type:none}ul.lst-kix_co3qxfmnwj80-8{list-style-type:none}.lst-kix_96bqz1tz2ti8-4>li:before{content:"\0025cb  "}ul.lst-kix_o7k5zfebgz8f-2{list-style-type:none}ul.lst-kix_co3qxfmnwj80-7{list-style-type:none}ul.lst-kix_o7k5zfebgz8f-1{list-style-type:none}ul.lst-kix_co3qxfmnwj80-6{list-style-type:none}ul.lst-kix_o7k5zfebgz8f-4{list-style-type:none}ul.lst-kix_co3qxfmnwj80-5{list-style-type:none}ul.lst-kix_o7k5zfebgz8f-3{list-style-type:none}.lst-kix_o7k5zfebgz8f-8>li:before{content:"\0025a0  "}.lst-kix_96bqz1tz2ti8-3>li:before{content:"\0025cf  "}.lst-kix_96bqz1tz2ti8-7>li:before{content:"\0025cb  "}ul.lst-kix_o7k5zfebgz8f-0{list-style-type:none}ul.lst-kix_co3qxfmnwj80-0{list-style-type:none}.lst-kix_96bqz1tz2ti8-0>li:before{content:"\0025cf  "}.lst-kix_96bqz1tz2ti8-8>li:before{content:"\0025a0  "}.lst-kix_brdv78mcwj2k-0>li:before{content:"\0025cf  "}ul.lst-kix_co3qxfmnwj80-4{list-style-type:none}ul.lst-kix_co3qxfmnwj80-3{list-style-type:none}ul.lst-kix_co3qxfmnwj80-2{list-style-type:none}ul.lst-kix_co3qxfmnwj80-1{list-style-type:none}.lst-kix_o7k5zfebgz8f-1>li:before{content:"\0025cb  "}ol.lst-kix_n33gkxdehakt-2.start{counter-reset:lst-ctn-kix_n33gkxdehakt-2 0}ol.lst-kix_aahkimjpt9di-8{list-style-type:none}ol.lst-kix_aahkimjpt9di-4{list-style-type:none}ol.lst-kix_aahkimjpt9di-5{list-style-type:none}ol.lst-kix_aahkimjpt9di-6{list-style-type:none}ol.lst-kix_aahkimjpt9di-7{list-style-type:none}.lst-kix_o7k5zfebgz8f-4>li:before{content:"\0025cb  "}ol.lst-kix_aahkimjpt9di-0{list-style-type:none}ol.lst-kix_aahkimjpt9di-1{list-style-type:none}.lst-kix_uvlrkeeima8c-8>li:before{content:"\0025a0  "}ol.lst-kix_aahkimjpt9di-2{list-style-type:none}ol.lst-kix_aahkimjpt9di-3{list-style-type:none}.lst-kix_o7k5zfebgz8f-5>li:before{content:"\0025a0  "}ol.lst-kix_wqmsnxqiutdl-0.start{counter-reset:lst-ctn-kix_wqmsnxqiutdl-0 0}.lst-kix_aahkimjpt9di-3>li{counter-increment:lst-ctn-kix_aahkimjpt9di-3}.lst-kix_aahkimjpt9di-8>li:before{content:"" counter(lst-ctn-kix_aahkimjpt9di-8,lower-roman) ". "}.lst-kix_9wi4ri9wn5sf-3>li:before{content:"\0025cf  "}.lst-kix_n52a1wwuvb9p-8>li{counter-increment:lst-ctn-kix_n52a1wwuvb9p-8}.lst-kix_v5nzep4u83g0-6>li:before{content:"\0025cf  "}.lst-kix_9wi4ri9wn5sf-7>li:before{content:"\0025cb  "}.lst-kix_dk23tkuz99tr-8>li:before{content:"\0025a0  "}ol.lst-kix_n33gkxdehakt-4.start{counter-reset:lst-ctn-kix_n33gkxdehakt-4 0}.lst-kix_81y9x3igji7d-4>li:before{content:"\0025cb  "}.lst-kix_qc8lj5xbyb37-8>li:before{content:"\0025a0  "}.lst-kix_81y9x3igji7d-0>li:before{content:"\0025cf  "}.lst-kix_81y9x3igji7d-8>li:before{content:"\0025a0  "}.lst-kix_iaipzzw60p4p-2>li:before{content:"\0025a0  "}.lst-kix_dk23tkuz99tr-4>li:before{content:"\0025cb  "}.lst-kix_wuz3by2qjq9-8>li:before{content:"\0025a0  "}.lst-kix_aqcs43vz8afa-5>li:before{content:"\0025a0  "}ol.lst-kix_n33gkxdehakt-7.start{counter-reset:lst-ctn-kix_n33gkxdehakt-7 0}.lst-kix_aqcs43vz8afa-1>li:before{content:"\0025cb  "}.lst-kix_iaipzzw60p4p-6>li:before{content:"\0025cf  "}.lst-kix_dk23tkuz99tr-0>li:before{content:"\0025cf  "}.lst-kix_aahkimjpt9di-5>li{counter-increment:lst-ctn-kix_aahkimjpt9di-5}ul.lst-kix_9wi4ri9wn5sf-8{list-style-type:none}.lst-kix_n33gkxdehakt-5>li:before{content:"" counter(lst-ctn-kix_n33gkxdehakt-5,lower-roman) ". "}ul.lst-kix_9wi4ri9wn5sf-7{list-style-type:none}ul.lst-kix_9wi4ri9wn5sf-6{list-style-type:none}ul.lst-kix_9wi4ri9wn5sf-5{list-style-type:none}ul.lst-kix_9wi4ri9wn5sf-4{list-style-type:none}.lst-kix_fsy5zudt2vbw-5>li:before{content:"\0025a0  "}ul.lst-kix_9wi4ri9wn5sf-3{list-style-type:none}ul.lst-kix_9wi4ri9wn5sf-2{list-style-type:none}ul.lst-kix_9wi4ri9wn5sf-1{list-style-type:none}ul.lst-kix_9wi4ri9wn5sf-0{list-style-type:none}.lst-kix_n33gkxdehakt-1>li:before{content:"" counter(lst-ctn-kix_n33gkxdehakt-1,lower-latin) ". "}.lst-kix_kc6yd44ledkb-5>li:before{content:"\0025a0  "}.lst-kix_sd321hhkupl9-8>li:before{content:"\0025a0  "}.lst-kix_40f6n3ltgi70-1>li:before{content:"\0025cb  "}.lst-kix_n33gkxdehakt-4>li{counter-increment:lst-ctn-kix_n33gkxdehakt-4}ul.lst-kix_81y9x3igji7d-2{list-style-type:none}ul.lst-kix_81y9x3igji7d-1{list-style-type:none}.lst-kix_jaqdxbe30fam-3>li:before{content:"\0025cf  "}.lst-kix_jaqdxbe30fam-7>li:before{content:"\0025cb  "}ul.lst-kix_81y9x3igji7d-0{list-style-type:none}ol.lst-kix_n33gkxdehakt-6.start{counter-reset:lst-ctn-kix_n33gkxdehakt-6 0}.lst-kix_40f6n3ltgi70-5>li:before{content:"\0025a0  "}.lst-kix_8pk9hjreqo2y-1>li:before{content:"\0025cb  "}.lst-kix_n52a1wwuvb9p-2>li:before{content:"" counter(lst-ctn-kix_n52a1wwuvb9p-2,lower-roman) ".) "}.lst-kix_n52a1wwuvb9p-6>li:before{content:"" counter(lst-ctn-kix_n52a1wwuvb9p-6,decimal) ". "}ul.lst-kix_81y9x3igji7d-6{list-style-type:none}ul.lst-kix_81y9x3igji7d-5{list-style-type:none}.lst-kix_aahkimjpt9di-0>li:before{content:"" counter(lst-ctn-kix_aahkimjpt9di-0,decimal) ". "}.lst-kix_8pk9hjreqo2y-5>li:before{content:"\0025a0  "}ul.lst-kix_81y9x3igji7d-4{list-style-type:none}ul.lst-kix_81y9x3igji7d-3{list-style-type:none}.lst-kix_sd321hhkupl9-0>li:before{content:"\0025cf  "}ul.lst-kix_81y9x3igji7d-8{list-style-type:none}.lst-kix_7i0amfgly70v-6>li:before{content:"\0025cf  "}ul.lst-kix_81y9x3igji7d-7{list-style-type:none}.lst-kix_aahkimjpt9di-4>li:before{content:"" counter(lst-ctn-kix_aahkimjpt9di-4,lower-latin) ". "}.lst-kix_v5nzep4u83g0-2>li:before{content:"\0025a0  "}.lst-kix_vv2etzvoc5tf-5>li{counter-increment:lst-ctn-kix_vv2etzvoc5tf-5}.lst-kix_sd321hhkupl9-4>li:before{content:"\0025cb  "}.lst-kix_7i0amfgly70v-2>li:before{content:"\0025a0  "}.lst-kix_n52a1wwuvb9p-3>li{counter-increment:lst-ctn-kix_n52a1wwuvb9p-3}ol.lst-kix_n33gkxdehakt-5.start{counter-reset:lst-ctn-kix_n33gkxdehakt-5 0}ol.lst-kix_aahkimjpt9di-7.start{counter-reset:lst-ctn-kix_aahkimjpt9di-7 0}.lst-kix_vv2etzvoc5tf-3>li{counter-increment:lst-ctn-kix_vv2etzvoc5tf-3}.lst-kix_n33gkxdehakt-0>li{counter-increment:lst-ctn-kix_n33gkxdehakt-0}ol.lst-kix_vv2etzvoc5tf-1.start{counter-reset:lst-ctn-kix_vv2etzvoc5tf-1 0}ul.lst-kix_qc8lj5xbyb37-0{list-style-type:none}ol.lst-kix_n52a1wwuvb9p-3.start{counter-reset:lst-ctn-kix_n52a1wwuvb9p-3 0}ul.lst-kix_qc8lj5xbyb37-5{list-style-type:none}ul.lst-kix_qc8lj5xbyb37-6{list-style-type:none}ul.lst-kix_qc8lj5xbyb37-7{list-style-type:none}.lst-kix_n52a1wwuvb9p-2>li{counter-increment:lst-ctn-kix_n52a1wwuvb9p-2}ul.lst-kix_qc8lj5xbyb37-8{list-style-type:none}ul.lst-kix_qc8lj5xbyb37-1{list-style-type:none}ul.lst-kix_qc8lj5xbyb37-2{list-style-type:none}ul.lst-kix_qc8lj5xbyb37-3{list-style-type:none}ul.lst-kix_qc8lj5xbyb37-4{list-style-type:none}.lst-kix_wqmsnxqiutdl-3>li{counter-increment:lst-ctn-kix_wqmsnxqiutdl-3}.lst-kix_wqmsnxqiutdl-6>li:before{content:"" counter(lst-ctn-kix_wqmsnxqiutdl-6,decimal) ". "}ol.lst-kix_wqmsnxqiutdl-7.start{counter-reset:lst-ctn-kix_wqmsnxqiutdl-7 0}.lst-kix_wqmsnxqiutdl-5>li:before{content:"" counter(lst-ctn-kix_wqmsnxqiutdl-5,lower-roman) ". "}.lst-kix_1iag1cd3bozf-0>li:before{content:"\0025cf  "}.lst-kix_wqmsnxqiutdl-2>li:before{content:"" counter(lst-ctn-kix_wqmsnxqiutdl-2,lower-roman) ". "}.lst-kix_wqmsnxqiutdl-4>li:before{content:"" counter(lst-ctn-kix_wqmsnxqiutdl-4,lower-latin) ". "}.lst-kix_1iag1cd3bozf-1>li:before{content:"\0025cb  "}.lst-kix_wqmsnxqiutdl-3>li:before{content:"" counter(lst-ctn-kix_wqmsnxqiutdl-3,decimal) ". "}.lst-kix_wqmsnxqiutdl-0>li:before{content:"" counter(lst-ctn-kix_wqmsnxqiutdl-0,decimal) ". "}.lst-kix_wqmsnxqiutdl-1>li:before{content:"" counter(lst-ctn-kix_wqmsnxqiutdl-1,lower-latin) ". "}.lst-kix_1iag1cd3bozf-7>li:before{content:"\0025cb  "}.lst-kix_1iag1cd3bozf-6>li:before{content:"\0025cf  "}.lst-kix_vv2etzvoc5tf-7>li{counter-increment:lst-ctn-kix_vv2etzvoc5tf-7}.lst-kix_1iag1cd3bozf-5>li:before{content:"\0025a0  "}.lst-kix_1iag1cd3bozf-3>li:before{content:"\0025cf  "}.lst-kix_1iag1cd3bozf-2>li:before{content:"\0025a0  "}.lst-kix_1iag1cd3bozf-4>li:before{content:"\0025cb  "}.lst-kix_hylja30iez6-6>li:before{content:"\0025cf  "}.lst-kix_hylja30iez6-5>li:before{content:"\0025a0  "}.lst-kix_hylja30iez6-7>li:before{content:"\0025cb  "}.lst-kix_qc8lj5xbyb37-6>li:before{content:"\0025cf  "}.lst-kix_co3qxfmnwj80-8>li:before{content:"\0025a0  "}.lst-kix_hylja30iez6-4>li:before{content:"\0025cb  "}.lst-kix_hylja30iez6-8>li:before{content:"\0025a0  "}.lst-kix_qc8lj5xbyb37-5>li:before{content:"\0025a0  "}.lst-kix_wqmsnxqiutdl-7>li{counter-increment:lst-ctn-kix_wqmsnxqiutdl-7}.lst-kix_co3qxfmnwj80-6>li:before{content:"\0025cf  "}.lst-kix_qc8lj5xbyb37-3>li:before{content:"\0025cf  "}ol.lst-kix_vv2etzvoc5tf-6.start{counter-reset:lst-ctn-kix_vv2etzvoc5tf-6 0}.lst-kix_qc8lj5xbyb37-2>li:before{content:"\0025a0  "}.lst-kix_qc8lj5xbyb37-4>li:before{content:"\0025cb  "}.lst-kix_co3qxfmnwj80-7>li:before{content:"\0025cb  "}.lst-kix_co3qxfmnwj80-2>li:before{content:"\0025a0  "}ul.lst-kix_uvlrkeeima8c-2{list-style-type:none}ul.lst-kix_uvlrkeeima8c-1{list-style-type:none}.lst-kix_1iag1cd3bozf-8>li:before{content:"\0025a0  "}.lst-kix_qc8lj5xbyb37-0>li:before{content:"\0025cf  "}ul.lst-kix_uvlrkeeima8c-4{list-style-type:none}ul.lst-kix_uvlrkeeima8c-3{list-style-type:none}.lst-kix_co3qxfmnwj80-0>li:before{content:"\0025cf  "}.lst-kix_co3qxfmnwj80-4>li:before{content:"\0025cb  "}.lst-kix_hylja30iez6-0>li:before{content:"" counter(lst-ctn-kix_hylja30iez6-0,decimal) ". "}.lst-kix_qc8lj5xbyb37-1>li:before{content:"\0025cb  "}.lst-kix_co3qxfmnwj80-1>li:before{content:"\0025cb  "}.lst-kix_co3qxfmnwj80-5>li:before{content:"\0025a0  "}ul.lst-kix_uvlrkeeima8c-0{list-style-type:none}.lst-kix_hylja30iez6-2>li:before{content:"\0025a0  "}ol.lst-kix_wqmsnxqiutdl-2.start{counter-reset:lst-ctn-kix_wqmsnxqiutdl-2 0}.lst-kix_hylja30iez6-1>li:before{content:"\0025cb  "}.lst-kix_hylja30iez6-3>li:before{content:"\0025cf  "}ol.lst-kix_n52a1wwuvb9p-8.start{counter-reset:lst-ctn-kix_n52a1wwuvb9p-8 0}ul.lst-kix_uvlrkeeima8c-6{list-style-type:none}ul.lst-kix_uvlrkeeima8c-5{list-style-type:none}.lst-kix_co3qxfmnwj80-3>li:before{content:"\0025cf  "}ul.lst-kix_uvlrkeeima8c-8{list-style-type:none}ul.lst-kix_uvlrkeeima8c-7{list-style-type:none}ol.lst-kix_aahkimjpt9di-0.start{counter-reset:lst-ctn-kix_aahkimjpt9di-0 0}.lst-kix_9wi4ri9wn5sf-4>li:before{content:"\0025cb  "}.lst-kix_9wi4ri9wn5sf-8>li:before{content:"\0025a0  "}ul.lst-kix_wuz3by2qjq9-2{list-style-type:none}ul.lst-kix_wuz3by2qjq9-3{list-style-type:none}ul.lst-kix_wuz3by2qjq9-0{list-style-type:none}.lst-kix_n33gkxdehakt-7>li{counter-increment:lst-ctn-kix_n33gkxdehakt-7}ul.lst-kix_wuz3by2qjq9-1{list-style-type:none}.lst-kix_v5nzep4u83g0-3>li:before{content:"\0025cf  "}.lst-kix_9wi4ri9wn5sf-2>li:before{content:"\0025a0  "}ul.lst-kix_wuz3by2qjq9-8{list-style-type:none}ul.lst-kix_wuz3by2qjq9-6{list-style-type:none}ul.lst-kix_wuz3by2qjq9-7{list-style-type:none}ul.lst-kix_wuz3by2qjq9-4{list-style-type:none}ul.lst-kix_wuz3by2qjq9-5{list-style-type:none}.lst-kix_v5nzep4u83g0-5>li:before{content:"\0025a0  "}.lst-kix_v5nzep4u83g0-7>li:before{content:"\0025cb  "}.lst-kix_9wi4ri9wn5sf-6>li:before{content:"\0025cf  "}.lst-kix_qc8lj5xbyb37-7>li:before{content:"\0025cb  "}.lst-kix_81y9x3igji7d-5>li:before{content:"\0025a0  "}ul.lst-kix_v5nzep4u83g0-1{list-style-type:none}ul.lst-kix_v5nzep4u83g0-0{list-style-type:none}ul.lst-kix_v5nzep4u83g0-5{list-style-type:none}.lst-kix_aahkimjpt9di-2>li{counter-increment:lst-ctn-kix_aahkimjpt9di-2}ol.lst-kix_vv2etzvoc5tf-8.start{counter-reset:lst-ctn-kix_vv2etzvoc5tf-8 0}ul.lst-kix_v5nzep4u83g0-4{list-style-type:none}ul.lst-kix_v5nzep4u83g0-3{list-style-type:none}ul.lst-kix_v5nzep4u83g0-2{list-style-type:none}.lst-kix_81y9x3igji7d-1>li:before{content:"\0025cb  "}.lst-kix_81y9x3igji7d-7>li:before{content:"\0025cb  "}.lst-kix_wqmsnxqiutdl-6>li{counter-increment:lst-ctn-kix_wqmsnxqiutdl-6}.lst-kix_wuz3by2qjq9-7>li:before{content:"\0025cb  "}.lst-kix_9wi4ri9wn5sf-0>li:before{content:"\0025cf  "}.lst-kix_81y9x3igji7d-3>li:before{content:"\0025cf  "}.lst-kix_n33gkxdehakt-8>li{counter-increment:lst-ctn-kix_n33gkxdehakt-8}.lst-kix_fsy5zudt2vbw-4>li:before{content:"\0025cb  "}.lst-kix_wqmsnxqiutdl-7>li:before{content:"" counter(lst-ctn-kix_wqmsnxqiutdl-7,lower-latin) ". "}.lst-kix_kc6yd44ledkb-6>li:before{content:"\0025cf  "}ol.lst-kix_n33gkxdehakt-0.start{counter-reset:lst-ctn-kix_n33gkxdehakt-0 0}.lst-kix_fsy5zudt2vbw-6>li:before{content:"\0025cf  "}.lst-kix_fsy5zudt2vbw-8>li:before{content:"\0025a0  "}.lst-kix_kc6yd44ledkb-4>li:before{content:"\0025cb  "}.lst-kix_sd321hhkupl9-7>li:before{content:"\0025cb  "}.lst-kix_aahkimjpt9di-1>li{counter-increment:lst-ctn-kix_aahkimjpt9di-1}ol.lst-kix_wqmsnxqiutdl-5.start{counter-reset:lst-ctn-kix_wqmsnxqiutdl-5 0}ul.lst-kix_1iag1cd3bozf-7{list-style-type:none}ul.lst-kix_1iag1cd3bozf-8{list-style-type:none}ul.lst-kix_1iag1cd3bozf-5{list-style-type:none}ol.lst-kix_aahkimjpt9di-2.start{counter-reset:lst-ctn-kix_aahkimjpt9di-2 0}ul.lst-kix_1iag1cd3bozf-6{list-style-type:none}ul.lst-kix_1iag1cd3bozf-3{list-style-type:none}ul.lst-kix_1iag1cd3bozf-4{list-style-type:none}ul.lst-kix_1iag1cd3bozf-1{list-style-type:none}ul.lst-kix_1iag1cd3bozf-2{list-style-type:none}ul.lst-kix_1iag1cd3bozf-0{list-style-type:none}ul.lst-kix_v5nzep4u83g0-8{list-style-type:none}ul.lst-kix_v5nzep4u83g0-7{list-style-type:none}ul.lst-kix_v5nzep4u83g0-6{list-style-type:none}.lst-kix_kc6yd44ledkb-8>li:before{content:"\0025a0  "}.lst-kix_n52a1wwuvb9p-5>li:before{content:"(" counter(lst-ctn-kix_n52a1wwuvb9p-5,lower-roman) ") "}.lst-kix_n52a1wwuvb9p-7>li:before{content:"" counter(lst-ctn-kix_n52a1wwuvb9p-7,lower-latin) ". "}ol.lst-kix_hylja30iez6-0{list-style-type:none}.lst-kix_7i0amfgly70v-7>li:before{content:"\0025cb  "}.lst-kix_7i0amfgly70v-5>li:before{content:"\0025a0  "}ul.lst-kix_fsy5zudt2vbw-5{list-style-type:none}ul.lst-kix_fsy5zudt2vbw-4{list-style-type:none}ul.lst-kix_fsy5zudt2vbw-7{list-style-type:none}.lst-kix_n52a1wwuvb9p-1>li:before{content:"" counter(lst-ctn-kix_n52a1wwuvb9p-1,lower-latin) ".) "}ul.lst-kix_fsy5zudt2vbw-6{list-style-type:none}ul.lst-kix_fsy5zudt2vbw-8{list-style-type:none}.lst-kix_7i0amfgly70v-1>li:before{content:"\0025cb  "}.lst-kix_v5nzep4u83g0-1>li:before{content:"\0025cb  "}.lst-kix_sd321hhkupl9-1>li:before{content:"\0025cb  "}.lst-kix_n52a1wwuvb9p-6>li{counter-increment:lst-ctn-kix_n52a1wwuvb9p-6}.lst-kix_7i0amfgly70v-3>li:before{content:"\0025cf  "}ul.lst-kix_fsy5zudt2vbw-1{list-style-type:none}ul.lst-kix_fsy5zudt2vbw-0{list-style-type:none}ul.lst-kix_fsy5zudt2vbw-3{list-style-type:none}ul.lst-kix_fsy5zudt2vbw-2{list-style-type:none}.lst-kix_sd321hhkupl9-5>li:before{content:"\0025a0  "}.lst-kix_n52a1wwuvb9p-3>li:before{content:"(" counter(lst-ctn-kix_n52a1wwuvb9p-3,decimal) ") "}.lst-kix_sd321hhkupl9-3>li:before{content:"\0025cf  "}.lst-kix_brdv78mcwj2k-7>li:before{content:"\0025cb  "}.lst-kix_brdv78mcwj2k-6>li:before{content:"\0025cf  "}.lst-kix_s3nigs7r3it4-7>li:before{content:"\0025cb  "}ol.lst-kix_n52a1wwuvb9p-6.start{counter-reset:lst-ctn-kix_n52a1wwuvb9p-6 0}.lst-kix_brdv78mcwj2k-3>li:before{content:"\0025cf  "}.lst-kix_brdv78mcwj2k-2>li:before{content:"\0025a0  "}.lst-kix_s3nigs7r3it4-8>li:before{content:"\0025a0  "}.lst-kix_s3nigs7r3it4-0>li:before{content:"\0025cf  "}.lst-kix_vv2etzvoc5tf-4>li{counter-increment:lst-ctn-kix_vv2etzvoc5tf-4}ul.lst-kix_40f6n3ltgi70-8{list-style-type:none}ol.lst-kix_wqmsnxqiutdl-8{list-style-type:none}ul.lst-kix_40f6n3ltgi70-7{list-style-type:none}ol.lst-kix_wqmsnxqiutdl-7{list-style-type:none}ul.lst-kix_40f6n3ltgi70-6{list-style-type:none}.lst-kix_kc6yd44ledkb-3>li:before{content:"\0025cf  "}ol.lst-kix_wqmsnxqiutdl-6{list-style-type:none}ul.lst-kix_40f6n3ltgi70-5{list-style-type:none}.lst-kix_s3nigs7r3it4-3>li:before{content:"\0025cf  "}.lst-kix_s3nigs7r3it4-4>li:before{content:"\0025cb  "}ol.lst-kix_wqmsnxqiutdl-1{list-style-type:none}ul.lst-kix_40f6n3ltgi70-0{list-style-type:none}ol.lst-kix_wqmsnxqiutdl-0{list-style-type:none}ol.lst-kix_wqmsnxqiutdl-5{list-style-type:none}ul.lst-kix_40f6n3ltgi70-4{list-style-type:none}.lst-kix_kc6yd44ledkb-0>li:before{content:"\0025cf  "}ol.lst-kix_n52a1wwuvb9p-0.start{counter-reset:lst-ctn-kix_n52a1wwuvb9p-0 0}ol.lst-kix_wqmsnxqiutdl-4{list-style-type:none}ul.lst-kix_40f6n3ltgi70-3{list-style-type:none}ol.lst-kix_wqmsnxqiutdl-3{list-style-type:none}ul.lst-kix_40f6n3ltgi70-2{list-style-type:none}ol.lst-kix_wqmsnxqiutdl-2{list-style-type:none}ul.lst-kix_40f6n3ltgi70-1{list-style-type:none}ul.lst-kix_qzesqvrtujvq-0{list-style-type:none}.lst-kix_uvlrkeeima8c-6>li:before{content:"\0025cf  "}ul.lst-kix_qzesqvrtujvq-1{list-style-type:none}ul.lst-kix_qzesqvrtujvq-2{list-style-type:none}.lst-kix_wuz3by2qjq9-2>li:before{content:"\0025a0  "}.lst-kix_qzesqvrtujvq-3>li:before{content:"\0025cf  "}.lst-kix_uvlrkeeima8c-3>li:before{content:"\0025cf  "}.lst-kix_uvlrkeeima8c-7>li:before{content:"\0025cb  "}.lst-kix_vv2etzvoc5tf-6>li{counter-increment:lst-ctn-kix_vv2etzvoc5tf-6}.lst-kix_qzesqvrtujvq-4>li:before{content:"\0025cb  "}.lst-kix_wuz3by2qjq9-3>li:before{content:"\0025cf  "}.lst-kix_fsy5zudt2vbw-0>li:before{content:"\0025cf  "}.lst-kix_aahkimjpt9di-6>li{counter-increment:lst-ctn-kix_aahkimjpt9di-6}ol.lst-kix_aahkimjpt9di-5.start{counter-reset:lst-ctn-kix_aahkimjpt9di-5 0}ol.lst-kix_n52a1wwuvb9p-7.start{counter-reset:lst-ctn-kix_n52a1wwuvb9p-7 0}.lst-kix_qzesqvrtujvq-8>li:before{content:"\0025a0  "}.lst-kix_qzesqvrtujvq-7>li:before{content:"\0025cb  "}ol.lst-kix_n52a1wwuvb9p-1.start{counter-reset:lst-ctn-kix_n52a1wwuvb9p-1 0}ul.lst-kix_qzesqvrtujvq-7{list-style-type:none}ul.lst-kix_qzesqvrtujvq-8{list-style-type:none}.lst-kix_uvlrkeeima8c-2>li:before{content:"\0025a0  "}ul.lst-kix_qzesqvrtujvq-3{list-style-type:none}ul.lst-kix_qzesqvrtujvq-4{list-style-type:none}ul.lst-kix_qzesqvrtujvq-5{list-style-type:none}ul.lst-kix_qzesqvrtujvq-6{list-style-type:none}.lst-kix_n33gkxdehakt-3>li{counter-increment:lst-ctn-kix_n33gkxdehakt-3}.lst-kix_o7k5zfebgz8f-6>li:before{content:"\0025cf  "}.lst-kix_96bqz1tz2ti8-2>li:before{content:"\0025a0  "}.lst-kix_96bqz1tz2ti8-6>li:before{content:"\0025cf  "}.lst-kix_o7k5zfebgz8f-3>li:before{content:"\0025cf  "}.lst-kix_o7k5zfebgz8f-7>li:before{content:"\0025cb  "}ol.lst-kix_aahkimjpt9di-4.start{counter-reset:lst-ctn-kix_aahkimjpt9di-4 0}.lst-kix_o7k5zfebgz8f-2>li:before{content:"\0025a0  "}.lst-kix_96bqz1tz2ti8-1>li:before{content:"\0025cb  "}.lst-kix_96bqz1tz2ti8-5>li:before{content:"\0025a0  "}ul.lst-kix_96bqz1tz2ti8-0{list-style-type:none}.lst-kix_9wi4ri9wn5sf-5>li:before{content:"\0025a0  "}ul.lst-kix_96bqz1tz2ti8-2{list-style-type:none}.lst-kix_v5nzep4u83g0-8>li:before{content:"\0025a0  "}ul.lst-kix_96bqz1tz2ti8-1{list-style-type:none}ul.lst-kix_96bqz1tz2ti8-4{list-style-type:none}ul.lst-kix_96bqz1tz2ti8-3{list-style-type:none}ul.lst-kix_96bqz1tz2ti8-6{list-style-type:none}ul.lst-kix_96bqz1tz2ti8-5{list-style-type:none}ol.lst-kix_n52a1wwuvb9p-2.start{counter-reset:lst-ctn-kix_n52a1wwuvb9p-2 0}.lst-kix_9wi4ri9wn5sf-1>li:before{content:"\0025cb  "}ol.lst-kix_vv2etzvoc5tf-7{list-style-type:none}ol.lst-kix_vv2etzvoc5tf-8{list-style-type:none}.lst-kix_v5nzep4u83g0-4>li:before{content:"\0025cb  "}ol.lst-kix_vv2etzvoc5tf-5{list-style-type:none}.lst-kix_wqmsnxqiutdl-8>li{counter-increment:lst-ctn-kix_wqmsnxqiutdl-8}ol.lst-kix_vv2etzvoc5tf-6{list-style-type:none}ol.lst-kix_vv2etzvoc5tf-3{list-style-type:none}.lst-kix_aahkimjpt9di-6>li:before{content:"" counter(lst-ctn-kix_aahkimjpt9di-6,decimal) ". "}ol.lst-kix_vv2etzvoc5tf-4{list-style-type:none}ol.lst-kix_vv2etzvoc5tf-1{list-style-type:none}ol.lst-kix_vv2etzvoc5tf-2{list-style-type:none}ol.lst-kix_vv2etzvoc5tf-2.start{counter-reset:lst-ctn-kix_vv2etzvoc5tf-2 0}.lst-kix_iaipzzw60p4p-0>li:before{content:"\0025cf  "}.lst-kix_aahkimjpt9di-4>li{counter-increment:lst-ctn-kix_aahkimjpt9di-4}ol.lst-kix_vv2etzvoc5tf-0{list-style-type:none}ul.lst-kix_aqcs43vz8afa-0{list-style-type:none}ul.lst-kix_aqcs43vz8afa-1{list-style-type:none}ul.lst-kix_aqcs43vz8afa-6{list-style-type:none}.lst-kix_dk23tkuz99tr-6>li:before{content:"\0025cf  "}ul.lst-kix_aqcs43vz8afa-7{list-style-type:none}ul.lst-kix_aqcs43vz8afa-8{list-style-type:none}ul.lst-kix_aqcs43vz8afa-2{list-style-type:none}ul.lst-kix_aqcs43vz8afa-3{list-style-type:none}ul.lst-kix_aqcs43vz8afa-4{list-style-type:none}ul.lst-kix_aqcs43vz8afa-5{list-style-type:none}.lst-kix_iaipzzw60p4p-8>li:before{content:"\0025a0  "}.lst-kix_dk23tkuz99tr-2>li:before{content:"\0025a0  "}.lst-kix_81y9x3igji7d-6>li:before{content:"\0025cf  "}ol.lst-kix_aahkimjpt9di-6.start{counter-reset:lst-ctn-kix_aahkimjpt9di-6 0}.lst-kix_iaipzzw60p4p-4>li:before{content:"\0025cb  "}.lst-kix_aqcs43vz8afa-7>li:before{content:"\0025cb  "}.lst-kix_n33gkxdehakt-5>li{counter-increment:lst-ctn-kix_n33gkxdehakt-5}.lst-kix_aqcs43vz8afa-3>li:before{content:"\0025cf  "}.lst-kix_wuz3by2qjq9-6>li:before{content:"\0025cf  "}ol.lst-kix_vv2etzvoc5tf-5.start{counter-reset:lst-ctn-kix_vv2etzvoc5tf-5 0}.lst-kix_81y9x3igji7d-2>li:before{content:"\0025a0  "}.lst-kix_fsy5zudt2vbw-3>li:before{content:"\0025cf  "}.lst-kix_n33gkxdehakt-3>li:before{content:"" counter(lst-ctn-kix_n33gkxdehakt-3,decimal) ". "}.lst-kix_n33gkxdehakt-7>li:before{content:"" counter(lst-ctn-kix_n33gkxdehakt-7,lower-latin) ". "}.lst-kix_qzesqvrtujvq-0>li:before{content:"\0025cf  "}.lst-kix_fsy5zudt2vbw-7>li:before{content:"\0025cb  "}.lst-kix_sd321hhkupl9-6>li:before{content:"\0025cf  "}.lst-kix_wqmsnxqiutdl-8>li:before{content:"" counter(lst-ctn-kix_wqmsnxqiutdl-8,lower-roman) ". "}.lst-kix_jaqdxbe30fam-5>li:before{content:"\0025a0  "}ol.lst-kix_vv2etzvoc5tf-4.start{counter-reset:lst-ctn-kix_vv2etzvoc5tf-4 0}.lst-kix_8pk9hjreqo2y-7>li:before{content:"\0025cb  "}.lst-kix_40f6n3ltgi70-3>li:before{content:"\0025cf  "}.lst-kix_40f6n3ltgi70-7>li:before{content:"\0025cb  "}.lst-kix_kc6yd44ledkb-7>li:before{content:"\0025cb  "}ol.lst-kix_n52a1wwuvb9p-4.start{counter-reset:lst-ctn-kix_n52a1wwuvb9p-4 0}.lst-kix_7i0amfgly70v-8>li:before{content:"\0025a0  "}ul.lst-kix_jaqdxbe30fam-0{list-style-type:none}ul.lst-kix_jaqdxbe30fam-3{list-style-type:none}ul.lst-kix_jaqdxbe30fam-4{list-style-type:none}.lst-kix_8pk9hjreqo2y-3>li:before{content:"\0025cf  "}ul.lst-kix_jaqdxbe30fam-1{list-style-type:none}ul.lst-kix_jaqdxbe30fam-2{list-style-type:none}ul.lst-kix_jaqdxbe30fam-7{list-style-type:none}.lst-kix_jaqdxbe30fam-1>li:before{content:"\0025cb  "}ul.lst-kix_jaqdxbe30fam-8{list-style-type:none}ul.lst-kix_jaqdxbe30fam-5{list-style-type:none}ul.lst-kix_jaqdxbe30fam-6{list-style-type:none}.lst-kix_n52a1wwuvb9p-0>li:before{content:"" counter(lst-ctn-kix_n52a1wwuvb9p-0,decimal) ".) "}.lst-kix_n52a1wwuvb9p-8>li:before{content:"" counter(lst-ctn-kix_n52a1wwuvb9p-8,lower-roman) ". "}ul.lst-kix_brdv78mcwj2k-2{list-style-type:none}ul.lst-kix_7i0amfgly70v-3{list-style-type:none}.lst-kix_sd321hhkupl9-2>li:before{content:"\0025a0  "}ul.lst-kix_brdv78mcwj2k-3{list-style-type:none}ul.lst-kix_7i0amfgly70v-2{list-style-type:none}ul.lst-kix_brdv78mcwj2k-0{list-style-type:none}ul.lst-kix_7i0amfgly70v-1{list-style-type:none}.lst-kix_v5nzep4u83g0-0>li:before{content:"\0025cf  "}ul.lst-kix_brdv78mcwj2k-1{list-style-type:none}ul.lst-kix_7i0amfgly70v-0{list-style-type:none}ol.lst-kix_n33gkxdehakt-8{list-style-type:none}ol.lst-kix_aahkimjpt9di-8.start{counter-reset:lst-ctn-kix_aahkimjpt9di-8 0}ol.lst-kix_n33gkxdehakt-7{list-style-type:none}.lst-kix_7i0amfgly70v-0>li:before{content:"\0025cf  "}.lst-kix_7i0amfgly70v-4>li:before{content:"\0025cb  "}ol.lst-kix_vv2etzvoc5tf-3.start{counter-reset:lst-ctn-kix_vv2etzvoc5tf-3 0}ol.lst-kix_n33gkxdehakt-6{list-style-type:none}ol.lst-kix_n33gkxdehakt-5{list-style-type:none}ul.lst-kix_96bqz1tz2ti8-8{list-style-type:none}ol.lst-kix_n33gkxdehakt-4{list-style-type:none}ol.lst-kix_n52a1wwuvb9p-5.start{counter-reset:lst-ctn-kix_n52a1wwuvb9p-5 0}ul.lst-kix_96bqz1tz2ti8-7{list-style-type:none}ol.lst-kix_n33gkxdehakt-3{list-style-type:none}ul.lst-kix_brdv78mcwj2k-8{list-style-type:none}ol.lst-kix_n33gkxdehakt-2{list-style-type:none}ul.lst-kix_7i0amfgly70v-8{list-style-type:none}ol.lst-kix_n33gkxdehakt-1{list-style-type:none}ul.lst-kix_brdv78mcwj2k-6{list-style-type:none}ul.lst-kix_7i0amfgly70v-7{list-style-type:none}ol.lst-kix_n33gkxdehakt-0{list-style-type:none}ul.lst-kix_brdv78mcwj2k-7{list-style-type:none}ul.lst-kix_7i0amfgly70v-6{list-style-type:none}.lst-kix_aahkimjpt9di-2>li:before{content:"" counter(lst-ctn-kix_aahkimjpt9di-2,lower-roman) ". "}ul.lst-kix_brdv78mcwj2k-4{list-style-type:none}ul.lst-kix_7i0amfgly70v-5{list-style-type:none}ul.lst-kix_brdv78mcwj2k-5{list-style-type:none}ul.lst-kix_7i0amfgly70v-4{list-style-type:none}.lst-kix_n52a1wwuvb9p-4>li:before{content:"(" counter(lst-ctn-kix_n52a1wwuvb9p-4,lower-latin) ") "}ol{margin:0;padding:0}table td,table th{padding:0}.c15{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:135pt;border-top-color:#000000;border-bottom-style:solid}.c13{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:151.4pt;border-top-color:#000000;border-bottom-style:solid}.c3{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:165pt;border-top-color:#000000;border-bottom-style:solid}.c9{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:20pt;font-family:"Arial";font-style:normal}.c5{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c11{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:italic}.c8{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:16pt;font-family:"Arial";font-style:normal}.c21{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:26pt;font-family:"Arial";font-style:normal}.c19{color:#000000;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Arial";font-style:normal}.c0{padding-top:0pt;padding-bottom:0pt;line-height:1.15;orphans:2;widows:2;text-align:left}.c6{padding-top:18pt;padding-bottom:6pt;line-height:1.15;page-break-after:avoid;text-align:left}.c23{padding-top:0pt;padding-bottom:3pt;line-height:1.15;page-break-after:avoid;text-align:left}.c7{padding-top:20pt;padding-bottom:6pt;line-height:1.15;page-break-after:avoid;text-align:left}.c1{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c24{border-spacing:0;border-collapse:collapse;margin-right:auto}.c16{background-color:#ffffff;max-width:451.4pt;padding:72pt 72pt 72pt 72pt}.c22{border:1px solid black;margin:5px}.c4{margin-left:36pt;padding-left:0pt}.c14{margin-left:72pt;padding-left:0pt}.c10{padding:0;margin:0}.c18{text-indent:36pt}.c2{height:11pt}.c17{font-style:italic}.c20{height:0pt}.c12{font-weight:700}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}</style></head><body class="c16"><h1 class="c7" id="h.yll88di52jlk"><span class="c9">Overview</span></h1><p class="c0"><span class="c11">Note: This document has not been revised since May 2017. Changes in the messenger since May will not be fully reflected.</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">This document gives a more broad-view of several FreezeMessenger aspects, implementation details, and pitfalls. Specific developer documentation should be available elsewhere, though all developer documentation is originally written directly in FreezeMessenger; API documentation can be found at the top of each API file, and function documentation before each function.</span></p><p class="c0 c2"><span class="c5"></span></p><h1 class="c7" id="h.a8oc4d52lq0d"><span class="c9">FreezeMessenger&rsquo;s Design</span></h1><p class="c0"><span class="c5">FreezeMessenger, at its core, is composed entirely of an API. This API interfaces with the backend database and various caches to store and retrieve data.</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">Of-course, this makes it seem quite simple, but to ensure maximum compatibility, performance, and flexibility, FreezeMessenger implements an array of advanced functionality:</span></p><ul class="c10 lst-kix_o7k5zfebgz8f-0 start"><li class="c0 c4"><span class="c5">A Database Access Layer that processes all database instructions as arrays, eventually converting them into commands understandable by the standard database drivers. (At present, only MySQL is supported, but the DAL has been explicitly designed around eventual PostGreSQL support. After that, if only to show its flexibility, SQLite and SQL Server support will be implemented.)</span></li><li class="c0 c4"><span class="c5">FreezeMessenger will use APC or Memcached (TODO) for basic memory caches, and Redis (TODO) for proper list caches. It is designed to support any key-value store for both, however, treating the former as &ldquo;in-memory&rdquo; caches and the latter as &ldquo;on-disk&rdquo; caches.</span></li><li class="c0 c4"><span class="c5">FreezeMessenger attempts to be agnostic to the login server. It can use logins provided by forums, OAuth providers, and so-on, without much effort.</span></li></ul><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">Additionally, FreezeMessenger does come with a reasonably advanced Javascript frontend.</span></p><h1 class="c7" id="h.lu7s7ps41pwj"><span class="c9">Some Development Lessons</span></h1><p class="c0"><span class="c5">I started FreezeMessenger when I was a sophomore in highschool, and likely won&rsquo;t have finished it until I graduate college. As I&rsquo;ve worked on it on-and-off for nearly a decade, and my most formative decade at that, I do believe I can at least offer some small tips for beginner software development:</span></p><p class="c0 c2"><span class="c5"></span></p><ul class="c10 lst-kix_sd321hhkupl9-0 start"><li class="c0 c4"><span class="c5">Write unit tests from the beginning. I still haven&rsquo;t, as of this writing, added unit tests to FreezeMessenger, though they are my number one priority for once I release a semi-stable beta. As a consequence, I&rsquo;ve often broken things without realising it, and spent a great deal of time tracking down bugs that I would have been alerted to instantly if I had written good unit tests.</span></li><li class="c0 c4"><span class="c5">If you&rsquo;re going to write the same line of code twice, try putting it in a function. Beginners especially won&rsquo;t have a good sense of when code is reusable, so forcing duplicate code into functions can greatly ease long-term maintainability.</span></li><li class="c0 c4"><span class="c5">Learn object-oriented style from the get-go. ...If you&rsquo;re writing unit tests from the beginning, you&rsquo;re probably using objects from the beginning, but if you decide to skip my first piece of advice, listen to this one.</span></li></ul><p class="c0 c2"><span class="c5"></span></p><h1 class="c7" id="h.a4mah9p4rh9f"><span class="c9">Some Database Principles</span></h1><ul class="c10 lst-kix_s3nigs7r3it4-0 start"><li class="c0 c4"><span>In most software, data is written far less often than it is read. As a result, it can be </span><span class="c17">tremendously</span><span class="c5">&nbsp;beneficial to perform calculations when data is written, and not when it is read. (For instance, if you calculate slowFunction(columnA, columnB), store the result in columnC instead of calling slowFunction every time data is read.)</span></li><li class="c0 c4"><span class="c5">Data is most commonly stored on disk at rest. In order to avoid unnecessary disk arm movements, avoid reading columns from a row that may be stored on a separate disk sector. This includes TEXT and BLOB columns -- these will often be stored in a separate disk location from the main row struct.</span></li><li class="c0 c4"><span class="c5">Likewise, as data is most commonly stored on disk, avoid reading as much data as possible from the database. For instance, an aggregation can be stored in a TEXT/BLOB column in a single row (e.g. userGroupMembers could be stored as caches both in users.memberOfGroups and groups.members). As this value will only be stored in a single disk location, and will possibly transfer less data, it is often preferable to reading the full aggregation. Similarly, those lists stored in TEXT columns should be compressed to BLOBs if possible (see our packing discussion below).</span></li><li class="c0 c4"><span class="c5">Memory tables, where supported, can be very, very fast. But be mindful of how memory tables work -- typically, every column will be fixed-length, so a VARCHAR(1000) will ALWAYS take up 1000 bytes in every row, instead of being flexible.</span></li></ul><p class="c0 c2"><span class="c5"></span></p><h1 class="c7" id="h.t6x6ugwebrlu"><span class="c9">Common Installation Problems</span></h1><ul class="c10 lst-kix_8pk9hjreqo2y-0 start"><li class="c0 c4"><span>On large installations, the </span><span class="c12">ping</span><span>&nbsp;table, which is stored in memory, can become too large for any additional data to be added. This is rare, but if it occurs can be addressed by increasing the MySQL </span><span class="c12">max_heap_table_size</span><span class="c5">&nbsp;system variable. [TODO: roughly how many rows?] This problem affects other tables, but only the ping table has no fallback.</span></li><li class="c0 c4"><span>Like above, the </span><span class="c12">roomPermissionsCache</span><span class="c5">&nbsp;table can become too large. Permission calls will instead perform a much slower full-lookup, which can adversely affect the performance of your installation. [TODO: how many?]</span></li><li class="c0 c4"><span class="c5">Similarly again, access tokens are stored in a memory table if possible. If the table becomes full, new logins may not be possible. [TODO: how many?]</span></li><li class="c0 c4"><span class="c5">Several caches are maintained for room and user lists, however these may become too large, and the caches will be unable to be written. In this event, Redis will be used (if available; TODO) or, alternatively, all lookups will rescan the equivalent tables (a much slower action) and performance will be degraded. In this event, we recommend trying to increase the space allotted to the caches, or reducing the maximum number of rooms allowed to a user in these lists.</span></li><li class="c0 c4"><span class="c5">Additionally, the list of users who watch any given room is cached. If this cache becomes too large and unwritable, then new messages will trigger large queries on the watch rooms table. Alleviating this can be more difficult than the above problem, as placing a cap on the number of users who can follow any given room is impractical. Increasing the size of the database cache, or installing a supplementary APC/Redis cache, is recommend. ([TODO] The APC cache will, by default, only record the cached list when reads to the rooms table fail. This is slower, but ensures that the APC cache doesn&rsquo;t become too large.)</span></li></ul><p class="c0 c2"><span class="c5"></span></p><h1 class="c7" id="h.z7np7vwbcc0r"><span class="c9">Login Compatibility</span></h1><p class="c0"><span class="c5">FreezeMessenger can &ldquo;borrow&rdquo; functionality from login servers, though the functionality is currently fairly limited. It is implemented as such (planned, somewhat):</span></p><p class="c0 c2"><span class="c5"></span></p><ul class="c10 lst-kix_96bqz1tz2ti8-0 start"><li class="c0 c4"><span class="c5">userId - May be generated by FreezeMessenger, but may also be copied from a login server. If a login server exposes userIds, FreezeMessenger will make future queries to the login server using the userId.</span></li><li class="c0 c4"><span class="c5">userName - Will always be provided by the login server, even if only an email address. If a login server does not expose a userId, a userName will be used to make future queries to the login server. (If it does expose a userId, userName may be updated to reflect changes in the login server.)</span></li><li class="c0 c4"><span class="c5">userName formatting - May occasionally be provided by the login server. The login connector may be able to interpret this value from, e.g., group membership. Such functionality is not otherwise implemented by FreezeMessenger (i.e. it can be shown, but it can not be changed directly).</span></li><li class="c0 c4"><span class="c5">email - May or may not be provided by the login server. If available, may be used to list user contact information and provide email updates to users (though such functionality is unlikely to be implemented anytime soon)</span></li><li class="c0 c4"><span class="c5">primary userGroup - If available from login server, FreezeMessenger functionality will be disabled entirely (i.e. will only support reads). If not available from login server, will both be readable and writable by FreezeMessenger.</span></li><li class="c0 c4"><span class="c5">additional userGroups - Same as primary userGroup</span></li><li class="c0 c4"><span class="c5">avatar - Same as primary userGroup</span></li></ul><p class="c0 c2"><span class="c5"></span></p><h1 class="c7" id="h.18a528hcd3rg"><span class="c9">Overload Protection</span></h1><p class="c0"><span class="c5">As with most software, FreezeMessenger grows slower the more people there are using it. An effort has been made to ensure that it performs well for both small and large deployments, but this only counts for so much if malicious actors attempt to slow your installation.</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">To this end, FreezeMessenger deploys a number of protection techniques:</span></p><ul class="c10 lst-kix_wuz3by2qjq9-0 start"><li class="c0 c4"><span class="c5">[Planned] First, we try to limit the number of accounts a single individual may register by limiting the number of accounts created by a single IP address.</span></li><li class="c0 c4"><span class="c5">We also place limits on the number of rooms that can be created by a single user, and the number of files and filespace a single user can upload.</span></li><li class="c0 c4"><span class="c5">We implement message flood detection by restricting the number of messages a user can post in a minute. By default, this limits to 30 in a single room, and 60 sitewide. (Detection for this is somewhat involved -- we keep a separate counter for each minute for each user for each room, as well as a counter for each minute for each user over the entire site.)</span></li><li class="c0 c4"><span class="c5">Users are likewise limited in the number and size of files they can upload.</span></li><li class="c0 c4"><span class="c5">[Planned] And captchas are invoked to restrict automation to a customisable degree. As long as a recaptcha private key is provided, then user registrations will be behind a captcha by default. Configuration allows captcha to be used as part of message flood detection, to upload files, ... </span></li></ul><p class="c0 c2"><span class="c5"></span></p><h1 class="c7" id="h.vr98hfrvgi6l"><span class="c9">Internal Notes</span></h1><ul class="c10 lst-kix_kc6yd44ledkb-0 start"><li class="c0 c4"><span class="c5">Fim\fimError is invoked whenever I want to communicate with a client that something went wrong, whether it be bad data or an internal error. General exceptions are similar, but less structured, and intended to communicate with the developer (me, usually), as opposed to the client.</span></li></ul><p class="c0 c2"><span class="c5"></span></p><h1 class="c7" id="h.w2jr6cnqgh8m"><span class="c9">Database Schema</span></h1><p class="c0"><span class="c5">FreezeMessenger&rsquo;s database schema is fairly ambitious. Data is predominantly normalised, but there exist denormalised summary tables and columns to aid in performance and caching. Several tables exist, where allowable, solely in memory. Options are generally expressed as bitfields.</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">Almost all data is stored either as integers or strings; both bitfields and dates are designed to use the integer type, and won&rsquo;t deviate from this except where a type difference exists to aid in database performance (e.g. bitfields are often just optimised integers, and we do try to use those when available; in contrast, DATEs have a primarily string representation, and as such we avoid them in favour of storing timestamps in integers).</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">Integers generally are sized to be appropriate for the datatype:</span></p><ul class="c10 lst-kix_co3qxfmnwj80-0 start"><li class="c0 c4"><span class="c5">time is sized by the database abstraction layer to whatever is most appropriate (we don&rsquo;t specify it explicitly in our schema, instead simply denoting a field as being a time)</span></li><li class="c0 c4"><span class="c5">groupIds specify a size of 6 by default</span></li><li class="c0 c4"><span class="c5">userIds specify a size of 8 by default</span></li><li class="c0 c4"><span class="c5">messageIds specify a size of 9 by default</span></li></ul><p class="c0 c2"><span class="c5"></span></p><h2 class="c6" id="h.94k2wsq0w5y9"><span class="c8">roomId</span></h2><p class="c0"><span class="c5">The odd exception here is the roomId, which can represent either a normal room (becoming a standard integer), or a private room, which denotes the private room&rsquo;s users directly in the roomId (e.g. if users 1, 6, and 20 have a private room, the roomId is &ldquo;p1,6,20&rdquo;). Different options here exist for compression; for instance, we could transmit them as an ASCII string, we could pack the numbers in sequence (prepending a byte for room type), or we could pack the hexadecimal encoding of the numbers, prepending A for private rooms, B for off-the-record rooms, or no hex character for regular rooms, and separating the userIds with any hex character A-F. In general, the latter approach is the most space-efficient, as per these examples:</span></p><p class="c0 c2"><span class="c5"></span></p><a id="t.5e982067cf361fdf70185e95272d1922cc5d2a36"></a><a id="t.0"></a><table class="c24"><tbody><tr class="c20"><td class="c3" colspan="1" rowspan="1"><p class="c1 c2"><span class="c5"></span></p></td><td class="c15" colspan="1" rowspan="1"><p class="c1"><span class="c5">1, 2, 3, 500</span></p></td><td class="c13" colspan="1" rowspan="1"><p class="c1"><span class="c5">1000000, 10000000, 100000000, 1000000000</span></p></td></tr><tr class="c20"><td class="c3" colspan="1" rowspan="1"><p class="c1"><span class="c5">pack(&quot;cP*&quot;, &quot;p&quot;, n1, n2, n3, n4)</span></p></td><td class="c15" colspan="1" rowspan="1"><p class="c1"><span class="c5">strlen = 33</span></p></td><td class="c13" colspan="1" rowspan="1"><p class="c1"><span class="c5">strlen = 33</span></p></td></tr><tr class="c20"><td class="c3" colspan="1" rowspan="1"><p class="c1"><span class="c5">&ldquo;pn1,n2,n3,n4&rdquo;</span></p></td><td class="c15" colspan="1" rowspan="1"><p class="c1"><span class="c5">Strlen = 10</span></p></td><td class="c13" colspan="1" rowspan="1"><p class="c1"><span class="c5">strlen = 38</span></p></td></tr><tr class="c20"><td class="c3" colspan="1" rowspan="1"><p class="c1"><span class="c5">pack(&ldquo;H*&rdquo;, &ldquo;An1An2An3&rdquo;)</span></p></td><td class="c15" colspan="1" rowspan="1"><p class="c1"><span class="c19 c12">strlen = 6</span></p></td><td class="c13" colspan="1" rowspan="1"><p class="c1"><span class="c19 c12">strlen = 19</span></p></td></tr></tbody></table><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">We could go further, of-course, and narrow this down to a base-12 system, and we could go even further, allowing the 11th character to be used in numbers and reserving just the 12th character to separate userIds. However, PHP has no easy way of doing either, and thus we compromise on the pack(&ldquo;H*&rdquo;) approach, which is easy and quick to encode, and portable to-boot.</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">Thus, to store roomId, we look at the largest possible size for pack(&ldquo;H*&rdquo;), assuming that userIds have a max size of 9 bytes, and that private rooms have a maximum of 10 users. This results in pack(&ldquo;H*, &quot;A999999999A999999999A999999999A999999999A999999999A999999999A999999999A999999999A999999999A999999999&quot;&rdquo;), which has a size of 50 bytes. In practice, the field will usually be much smaller.</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">As a consequence of this, we do also encode our decimal roomIds to hexadecimal, using the same pack format for simplicity. While not yet implemented, we have considered making all roomIds after the first random. Suppose, for instance, we decide on 25 digits; one random base-10 roomId would be packed as pack(&ldquo;H*&rdquo;, &ldquo;1100094591492331046354101&rdquo;), which encodes to 13 bytes. And, subsequently, if a FreezeMessenger user wants to support larger private rooms, they would need to modify the size of the roomId fields.</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">However, there is a major exception: not all occurrences of roomId in the database can be used for private rooms. In these cases, roomId is left as a 9-character integer, like userId, to aid in performance. Additionally, if the database backend does not support binary data, we will generally store the values entirely unencoded -- as the original &ldquo;p1,2,3&rdquo;.</span></p><h1 class="c7" id="h.5lm6fr2cymqp"><span class="c9">Database Abstraction Layer</span></h1><h2 class="c6" id="h.z91f32zaktcq"><span class="c8">Why?</span></h2><p class="c0"><span class="c5">FreezeMessenger has no SQL-like commands. Every call is implemented with structured arrays that are converted into SQL-like commands. This has various benefits:</span></p><ul class="c10 lst-kix_aqcs43vz8afa-0 start"><li class="c0 c4"><span class="c5">Easy portability between database backends, including those that don&rsquo;t use SQL-like syntax.</span></li><li class="c0 c4"><span class="c5">Easy on-demand data conversion: while rare, it is occasionally quite helpful to be able to radically transform data right before it is sent to the database. For instance, the hexadecimal-encoded roomIds (described above) are only converted to this space-saving format by the database access layer, right before it includes the values in INSERT, UPDATE, or WHERE clauses. This can make porting tremendously easier, to, for instance, convert all binary data to base64.</span></li><li class="c0 c4"><span class="c5">Type-safety: by simple virtue of delimiting data with an array data structure (instead of composing strings of delimited data), it is much more difficult to accidentally introduce exploits. Similarly, comparisons are fairly explicit; an example WHERE clause of (`userName` = &ldquo;bob&rdquo; AND `age` &gt; 50 AND `height` &gt; `weight`) is encoded as [&ldquo;userName&rdquo; =&gt; &ldquo;bob&rdquo;, &ldquo;age&rdquo; =&gt; $db-&gt;int(50, &ldquo;gt&rdquo;), &ldquo;height&rdquo; =&gt; $db-&gt;column(&ldquo;weight&rdquo;, &ldquo;gt&rdquo;). And modifying a column to include an exploit is essentially impossible here -- say `height` changed to `` AND (DROP TABLE) AND ``. Our database access layer will insist on ensuring that this were encoded as ``` AND (DROP TABLE) AND ```, which would not be valid. (It is, in-fact, more restrictive than this in-practice, forbidding most non-alphanumeric characters entirely, as well as enforcing a maximum column length.)</span></li></ul><h2 class="c6" id="h.bd0pmt9lswr3"><span class="c8">Type Functions</span></h2><p class="c0"><span class="c5">The DAL supports types by invoking its member functions:</span></p><ul class="c10 lst-kix_qc8lj5xbyb37-0 start"><li class="c0 c4"><span class="c12">int()</span><span class="c5">&nbsp;for integers</span></li><li class="c0 c4"><span class="c12">bool()</span><span class="c5">&nbsp;for boolean values</span></li><li class="c0 c4"><span class="c12">blob()</span><span class="c5">&nbsp;for binary values</span></li><li class="c0 c4"><span class="c12">ts()</span><span>&nbsp;for timestamp values (and </span><span class="c12">now()</span><span class="c5">&nbsp;to specify the current timestamp)</span></li><li class="c0 c4"><span class="c12">str()</span><span class="c5">&nbsp;for strings</span></li><li class="c0 c4"><span class="c12">col()</span><span class="c5">&nbsp;for database columns/variables</span></li><li class="c0 c4"><span class="c12">in()</span><span>&nbsp;for any element of an array. For instance, </span><span class="c12">in([1,2,3])</span><span class="c5">&nbsp;will match 1, 2, or 3.</span></li><li class="c0 c4"><span class="c12">search()</span><span>&nbsp;for any string that includes the passed string. For instance, </span><span class="c12">search(&ldquo;hello&rdquo;)</span><span class="c5">&nbsp;will match &ldquo;hello, how are you&rdquo;, &ldquo;3hello52asdx&rdquo;, and so-on.</span></li><li class="c0 c4"><span class="c12">type($type, $value, $comparisonOperator)</span><span>&nbsp;for advanced values and comparison. For instance, </span><span class="c12">type(&lsquo;int&rsquo;, 33, &lsquo;gt&rsquo;)</span><span class="c5">&nbsp;specifies any integer greater than 33 -- that is, [33, INF].</span></li></ul><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">These types are used both for insertion and selection, with the obvious exceptions (in, search, etc.).</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">Arrays are not normally supported in the SQL layer (since SQL doesn&rsquo;t have arrays for storage), but may be used in conjunction with automatic data transformation (see below).</span></p><h2 class="c6" id="h.a4sg6pisfz5w"><span class="c8">Condition Arrays</span></h2><p class="c0"><span class="c5">Conditions arrays are specially-formatted arrays that can be passed to upsert(), update(), delete(), and select(). They can be quite simple, for instance:</span></p><ul class="c10 lst-kix_brdv78mcwj2k-0 start"><li class="c0 c4"><span class="c5">[&ldquo;name&rdquo; =&gt; &ldquo;Bob&rdquo;] finds entries where the name column is &ldquo;Bob.&rdquo;</span></li><li class="c0 c4"><span class="c5">[&ldquo;name&rdquo; =&gt; &ldquo;Bob&rdquo;, &ldquo;id&rdquo; =&gt; $db-&gt;int(3, &lsquo;gt&rsquo;)] finds entries where the name column is &ldquo;Bob&rdquo; AND the id column is greater than 3.</span></li></ul><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">They can also be more complicated; for instance:</span></p><ul class="c10 lst-kix_v5nzep4u83g0-0 start"><li class="c0 c4"><span class="c5">[&ldquo;either&rdquo; =&gt; [&ldquo;name&rdquo; =&gt; &ldquo;Bob&rdquo;, &ldquo;id&rdquo; =&gt; $db-&gt;int(3, &lsquo;gt&rsquo;)]] finds entries where the name column is &ldquo;Bob&rdquo; OR the id column is greater than 3.</span></li></ul><p class="c0 c2"><span class="c5"></span></p><h2 class="c6" id="h.c7mzxcdtpxyo"><span class="c8">Query Joining / Queueing</span></h2><p class="c0"><span>The DAL is capable of (experimental) query-joining through the queue system: either by invoking </span><span class="c12">autoQueue</span><span>&nbsp;or using the </span><span class="c12">queueInsert</span><span>, </span><span class="c12">queueDelete</span><span>, and </span><span class="c12">queueUpdate</span><span class="c5">, queries can be stored and then executed as a group. When the execution happens, similar queries (e.g. multiple updates to the same row of the same table) will be executed as a single query instead of multiple. Right now, this is limited, and only works in the following situations:</span></p><p class="c0 c2"><span class="c5"></span></p><ol class="c10 lst-kix_n52a1wwuvb9p-0 start" start="1"><li class="c0 c4"><span class="c5">Multiple deletions to the same table with different conditions can be combined into a single query by ORing the list of conditions. For instance, queueDelete(&ldquo;tableName&rdquo;, [id =&gt; 3]) and queueDelete(&ldquo;tableName&rdquo;, [name =&gt; &ldquo;Bob&rdquo;]) will be executed as delete(&ldquo;tableName&rdquo;, [&ldquo;either&rdquo; =&gt; [[id =&gt; 3], [name =&gt; &ldquo;Bob&rdquo;]]), which is a single SQL query: DELETE FROM tableName WHERE id = 3 OR name = &ldquo;Bob&rdquo;.</span></li><li class="c0 c4"><span class="c5">Multiple updates to the same table based on the same selection criteria can be combined into a single criteria by merging the update parameters. For instance</span></li></ol><ol class="c10 lst-kix_n52a1wwuvb9p-1 start" start="1"><li class="c0 c14"><span class="c5">queueUpdate(&ldquo;tableName&rdquo;, [name =&gt; Bob], [id =&gt; 1]) and</span></li><li class="c0 c14"><span class="c5">queueUpdate(&ldquo;tableName&rdquo;, [address =&gt; &ldquo;123 Downing St&rdquo;], [id = 1])</span></li></ol><p class="c0 c18"><span class="c5">can be combined into</span></p><ol class="c10 lst-kix_n52a1wwuvb9p-1" start="3"><li class="c0 c14"><span class="c5">update(&ldquo;tableName&rdquo;, [name =&gt; Bob, address =&gt; &ldquo;123 Downing St&rdquo;], [id = 1]</span></li></ol><ol class="c10 lst-kix_n52a1wwuvb9p-0" start="3"><li class="c0 c4"><span class="c5">At present, multiple insertions are not combined in any way, as the SQL backend is currently incapable of inserting multiple rows at once. This may change in the future.</span></li></ol><p class="c0 c2"><span class="c5"></span></p><h2 class="c6" id="h.qopy8oo17p3g"><span class="c8">Transactions</span></h2><p class="c0"><span class="c5">While advanced transactions may or may not fully work (depending on the backend), at least one level of transactions should always be supported. A transaction can be initiated by invoking startTransaction, and it can be finished by invoking endTransaction. The DAL makes no assurances as to what state data is stored in before a transaction is complete, merely that all changes made in a transaction are reversible.</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span>To reverse a transaction, invoke rollbackTransaction. This will be automatically invoked if a query error occurs, </span><span class="c12">however it may not be invoked if the DAL throws an exception</span><span class="c5">. This should be fixed in the future.</span></p><p class="c0 c2"><span class="c5"></span></p><h2 class="c6" id="h.uuocrjq4b2vg"><span class="c8">Automatic Data Transformation</span></h2><p class="c0"><span class="c5">Data can be automatically encoded for storage, and decoded on retrieval, by configuring the following DAL directives:</span></p><ul class="c10 lst-kix_81y9x3igji7d-0 start"><li class="c0 c4"><span class="c12">encode</span><span class="c5">&nbsp;- An array of table columns to transform on send and retrieval. Formatted as [tableName =&gt; [columnName =&gt; [encodeFunction, encodeType, decodeFunction], ...], &hellip;]</span></li><li class="c0 c4"><span class="c12">encodeCopy</span><span class="c5">&nbsp;- An array of table columns that should be copied to a secondary column and encoded. No decode will occur. Formatted as [tableName =&gt; [columnName =&gt; [encodeFunction, encodeType, columnCopyName], ...], &hellip;]</span></li><li class="c0 c4"><span class="c12">insertIdColumns</span><span>&nbsp;- This merely specifies which columns are returned by the insert ID (that is, are autoincremented on insert). It only needs to be specified if it is a column copied in </span><span class="c12">encodeCopy</span><span class="c5">.</span></li></ul><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">Encoding will happen in the following situations:</span></p><ul class="c10 lst-kix_uvlrkeeima8c-0 start"><li class="c0 c4"><span class="c5">Affected columns are updated/upserted.</span></li><li class="c0 c4"><span class="c5">Affected columns are inserted/upserted.</span></li></ul><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">Copy-and-encoding will happen in the following situations:</span></p><ul class="c10 lst-kix_uvlrkeeima8c-0"><li class="c0 c4"><span class="c5">Affected columns are updated/upserted.</span></li><li class="c0 c4"><span class="c5">Affected columns are inserted/upserted.</span></li><li class="c0 c4"><span class="c5">Affected columns are automatically generated on insert. (Must specify in insertIdColumns)</span></li></ul><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">Decoding will happen in the following situations:</span></p><ul class="c10 lst-kix_ikallxus7lnc-0 start"><li class="c0 c4"><span class="c5">Affected columns are retrieved by select()</span></li></ul><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span>Performance-wise, automatic data transformation is reasonably quick, as it uses </span><span>isset </span><sup><a href="#cmnt1" id="cmnt_ref1">[a]</a></sup><span class="c5">to check for the existence of transformation directives. Of-course, it must perform this check for every single column returned, but in general this should not result in an appreciable performance decrease.</span></p><p class="c0 c2"><span class="c5"></span></p><h2 class="c6" id="h.9lzdrlnqf9i8"><span class="c8">Triggers (Planned)</span></h2><p class="c0"><span class="c5">Most DBMS software does support triggers of some form, but they are generally quite difficult to express in a standardised way, with each implementation suffering from their own limitations. As such, the database access layer implements a very basic, singular trigger for ON CHANGE, which can be registered to any table. When the data in that table changes, this trigger will fire. The trigger is a PHP function, meaning it can execute any PHP code, but is principally used for maintaining list caches in columns.</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">Triggers should only fire once when operations are correctly queued.</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">Triggers affecting the row being INSERT/UPDATE/DELETEd are partially possible using data transformation.</span></p><h2 class="c6" id="h.gfcq1b55cgjb"><span class="c8">Query Logger (SQL Backend)</span></h2><p class="c0"><span>If a log file is specified to the </span><span class="c12">DatabaseSQL::queryLogToFile</span><span class="c5">&nbsp;property, a log of all queries will be written on termination of the object. This is a good way to profile any application using the DAL, as the full SQL query and the time it took to execute will both be recorded in the log file.</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span>On FreezeMessenger, setting the </span><span class="c12">logQueriesFile</span><span class="c5">&nbsp;directive to a fully-resolved filename (e.g. /var/log/fm-querylog) will activate the DAL log.</span></p><p class="c0 c2"><span class="c5"></span></p><h1 class="c7" id="h.p7zbwda3lp2m"><span class="c9">Various Future Implementation Notes</span></h1><ul class="c10 lst-kix_qzesqvrtujvq-0 start"><li class="c0 c4"><span class="c5">File editing is obviously prone to abuse, but the way it is intended to be implemented is pretty clear cut: the image URL will always point to whatever revision was most recent at the time the URL was generated, but clients can show indications that an image has newer versions available, and users can click into them. This functionality could be used, for instance, to allow users to draw on images. While we hope to have the core API editing functionality completed by the v1 stable, any front-end editing will wait.</span></li></ul><p class="c0 c2"><span class="c5"></span></p><h1 class="c7" id="h.6forfzfbzclx"><span class="c9">Common Objects</span></h1><h2 class="c6" id="h.lmsj0ycjaose"><span class="c8">The Fim\fimRoom Object</span></h2><p class="c0"><span class="c5">The Fim\fimRoom object fetches and interprets room information from various locations, typically the database. Any plugin wishing to retrieve room information should do so using the Fim\fimRoom object, as it will correctly parse database information while ignoring information if certain features are disabled; for instance, if the parental control subsystem is disabled, the Fim\fimRoom object will set the parental age of all rooms to 0, and return an empty array of parental flags, regardless of which information is currently stored in the database.</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">It also handles private rooms in the same way, setting defaults and generating the private room name based on its users. (Notably, a number of Fim\fimRoom methods will throw exceptions when the Fim\fimRoom instance is representing a private room.)</span></p><p class="c0 c2"><span class="c5"></span></p><h2 class="c6" id="h.akm7gjksvz6i"><span class="c8">The Fim\fimUser Object</span></h2><p class="c0"><span class="c5">Like the Fim\fimRoom object, the Fim\fimUser object fetches and interprets user information from various locations, typically the database. Any plugin wishing to retrieve user information should do so using the Fim\fimUser object.</span></p><p class="c0 c2"><span class="c5"></span></p><h2 class="c6" id="h.ap2jempfdsbd"><span class="c8">Object Optimisations</span></h2><p class="c0"><span class="c5">The common objects all implement certain optimisations to help with performance:<br></span></p><ol class="c10 lst-kix_aahkimjpt9di-0 start" start="1"><li class="c0 c4"><span>Parameter fetching: when an object property is needed, it will be fetched from the database if it is not currently available. Ideally, users of objects will declare exactly what properties they will need using </span><span class="c12">resolve()</span><span>, but lacking this the object will &ldquo;guess&rdquo; what additional properties it should retrieve whenever it fetches an unavailable property. (It is not efficient, after all, to </span><span class="c17">require</span><span>&nbsp;that an object user declare exactly what properties it will need. For instance, $database-&gt;hasPermission will invoke Fim\fimUser&rsquo;s privs property -- typically by invoking the hasPriv method -- </span><span class="c17">only if</span><span class="c5">&nbsp;a cached permission entry is not available. When we pass a Fim\fimUser object to hasPermission, we simply can&rsquo;t know if privs will be required or not.)<br></span></li><li class="c0 c4"><span class="c5">Caching: the objects themselves are cached to a limited degree. The database records most changes through the object&rsquo;s setDatabase() method, so the object&rsquo;s properties are updated when the DB is. As a result, partially- and fully- resolved objects are cached, eliminating the need for database calls to retrieve object state.<br><br>[Well, sorta. Only Fim\fimUser so-far.]<br><br>In the future, a factory method will likely be used to support at least limited object caching in this way. (In practice, it is somewhat tricky, as many properties can reasonably be kept stale for a matter of hours, while others shouldn&rsquo;t be stale for more than a few minutes. The biggest limitation is that list caches are updated from outside of setDatabase() -- updating the database collection triggers to also update any cached objects would solve this issue.)</span></li></ol><p class="c0 c2"><span class="c5"></span></p><h1 class="c7" id="h.aa0gzgtvlm1v"><span class="c9">Caching</span></h1><p class="c0"><span class="c5">Caching is deployed in a number of ways throughout FreezeMessenger.</span></p><p class="c0 c2"><span class="c5"></span></p><h2 class="c6" id="h.z0s36dav9642"><span class="c8">Result Caches</span></h2><p class="c0"><span class="c5">Some functions query many different tables in order to ascertain relatively little information. We try to cache such function calls in memory tables (if supported), with the table&rsquo;s primary key being the composite of the function&rsquo;s inputs, and its remaining columns being the function&rsquo;s outputs.</span></p><p class="c0 c2"><span class="c5"></span></p><ul class="c10 lst-kix_fsy5zudt2vbw-0 start"><li class="c0 c4"><span>fimDatabase-&gt;hasPermission takes two arguments, a Fim\fimRoom and a Fim\fimUser, and computes the bitfield of the user&rsquo;s permissions in that room. Thus, we cache results in the permissionsCache table, which has the primary key (userId, roomId), and the additional column permissionsField[?].</span><sup><a href="#cmnt2" id="cmnt_ref2">[b]</a></sup><span class="c5">&nbsp;In order to allow for cache expiration, we add a fourth column, expiration.</span></li></ul><h2 class="c6" id="h.gfuay14u7lcj"><span class="c8">List Caches</span></h2><p class="c0"><span class="c5">List caches store aggregated IDs for faster access, and, in many cases, are the preferred way of retrieving such lists. They include:</span></p><p class="c0 c2"><span class="c5"></span></p><ul class="c10 lst-kix_1iag1cd3bozf-0 start"><li class="c0 c4"><span class="c5">Users have five: one for watched rooms, one for favourite rooms, one for friended users, one for blocked users, and one for groups the user is a member of [todo]. These will be stored with the rest of the user data where applicable, e.g. in columns on the user table.</span></li><li class="c0 c4"><span class="c5">Rooms have one: a list of users who are watching the room.</span></li><li class="c0 c4"><span class="c5">Groups have one: a list of members.</span></li></ul><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">These are stored in the database through whatever serialisation is available, with the SQL backend&rsquo;s approach being to store them in binary. It does this as follows:</span></p><ol class="c10 lst-kix_hylja30iez6-0 start" start="1"><li class="c0 c4"><span class="c5">each ID in the list is converted to base-15</span></li><li class="c0 c4"><span class="c5">the base-15 numbers are packed into hexadecimal binary, with each ID separated by the F character.</span></li><li class="c0 c4"><span class="c5">the packed hexadecimal field is prepended and appended with 0xFF, which can ensure that the field is read and written back completely.</span></li></ol><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">As an example, [1, 4, 20] is encoded as 0xFF1F4F20FF (5 bytes).</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">The &ldquo;watched by users&rdquo; field, meanwhile, is automatically regenerated every so often (whereas the user caches are regenerated when the user performs an action). In order to support this, the list is prepended with the cache expiration timestamp. Thus, [1, 4, 20] is encoded as [time() + interval, 1, 4, 20]. The DAL will return a defined constant (fimDatabase::?) when the cache is expired, and will returned a different constant (fimDatabase::?) when the cache is corrupt/unavailable.</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">If the list becomes too large to be stored in the database (which we detect when the 0xFF bytes don&rsquo;t start and end the string, and thus is marked as corrupt, or when the length of the array exceeds a configuration directive), it will instead be stored to any available key-value stores.</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">Lookups to these values work as such:</span></p><ol class="c10 lst-kix_wqmsnxqiutdl-0 start" start="1"><li class="c0 c4"><span>A valid list may already exist in a previously-cached User/Room object. If so, use this list; such caches last for 10 minutes, and cannot be disabled (except by removing APC from the system), due to the nature of the caching approach. The object&rsquo;s list should be up-to-date </span><span class="c17">on the same server</span><span class="c5">, however: all methods capable of altering the list can also update the User/Room object. This asynchronicity is not a problem for single-server installations, and generally should not cause any confusion as long as a user stays on the same server for the duration of a session. However, if a user bounces between servers, they may perceive that a list update did not take hold, and further edits to a list will be likely to discard the previous ones; at most, 10 minutes must pass before the cache is invalidated and a new list appears.<br></span></li><li class="c0 c4"><span class="c5">A valid list may have been provided when the User/Room object was initialised. If so, use this list. (If an invalid list was provided, we typically proceed with the next steps automatically, even if the value has not been called. This may be addressed in the future.)<br></span></li><li class="c0 c4"><span class="c5">Check to see if a valid cache exists in the database. &nbsp;If it does, return it.</span></li></ol><p class="c0 c2"><span class="c5"></span></p><ol class="c10 lst-kix_wqmsnxqiutdl-0" start="4"><li class="c0 c4"><span>Check to see if the key exists in the first available set cache method (Redis, etc.). If it does, return it.</span></li></ol><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">This relies on a few assumptions about the efficiency of those caches:</span></p><ol class="c10 lst-kix_n33gkxdehakt-0 start" start="1"><li class="c0 c4"><span class="c5">APC: APC is quite fast (being in-memory), and thus is used for the initial cache. For quick successive uses of a cached entry, APC&rsquo;s caching of the User/Room objects is likely to eliminate all database fetches.</span></li></ol><p class="c0 c2"><span class="c5"></span></p><ol class="c10 lst-kix_n33gkxdehakt-0" start="2"><li class="c0 c4"><span>Database: The caches are likely to be used alongside the corresponding table records (user, room, etc.), so storing them with the database record is often faster </span><span class="c17">as long as</span><span>&nbsp;they are stored on the same disk sector. This will generally happen as long as the value is fairly short, which is why we compress them to binary blobs.<br><br>Note that, in practice, the caches are typically retrieved separately from the initial record retrieval. This is an area for optimisation (</span><span class="c12">(new Fim\fimUser(1))-&gt;resolve([&lsquo;name&rsquo;. &lsquo;watchRooms&rsquo;])</span><span class="c5">&nbsp;will resolve both of those properties with a single database request.)<br></span></li><li class="c0 c4"><span class="c5">Redis: Redis is quite good at optimising stores and retrievals, but the cost to check if a key exists is higher than is ideal in most cases, hence why we prefer to use the database record as the first source.</span></li></ol><h2 class="c6" id="h.7wjn61xyru9m"><span class="c8">Memory Table Caches</span></h2><p class="c0"><span class="c5">Some data is transient in nature, and stored in memory tables as a result. While this data will be lost on a restart (or, possibly, once the memory table gets too large), in return it becomes far faster to access.</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">As memory tables are very transient in nature, we never rely on a memory table cache; the data is always available through slower alternatives. In general, we try to use them opportunistically:</span></p><ul class="c10 lst-kix_9wi4ri9wn5sf-0 start"><li class="c0 c4"><span class="c5">The permissionsCache table caches permission calls (see above) only when a call is made. Entries from it are automatically deleted whenever a user logs-in [TODO?]</span></li><li class="c0 c4"><span class="c5">Events are implemented through the memory table. Config directives specify the maximum number of items in the table, and whenever a new event is added we find its insert ID. We then delete all events with ID &lt; (insert ID - max items). (Events are not implemented through other tables, but most event functionality is possible with occasional queries to the other APIs, like getMessages.)</span></li></ul><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span>Note that active users are stored in a memory table as well. If the table reaches capacity, the program will likely stop reporting such users correctly. Each row in the table is actually somewhat large (in MySQL, it will compose a 4-byte integer, a 23-byte </span></p><p class="c0 c2"><span class="c5"></span></p><h2 class="c6" id="h.fysruxwv93on"><span class="c8">Array Caches</span></h2><p class="c0"><span class="c5">Arrays of data may be cached using some combination of APC, Memcache, and disk caching, whichever method is available. Data is stored so that whatever needed information is available through key-value retrieval:</span></p><ul class="c10 lst-kix_dk23tkuz99tr-0 start"><li class="c0 c4"><span>The list of censor words applied to a room is cached. Every room has a separate cache entry for this; the cache is only </span><span class="c17">read </span><span class="c5">when a message is sent, so while the uncompressed nature of the cache may result in cache entries being discarded to make space, in practice this won&rsquo;t result in any meaningful performance penalty. [TODO: arguably, a separate cache for censor words should be maintained, with each room cache pointing to entries in this cache. This would substantially reduce the cache space on large installations.]</span></li></ul><p class="c0 c2"><span class="c5"></span></p><h1 class="c7" id="h.irafyscaxqb8"><span class="c9">Events</span></h1><p class="c0"><span class="c5">Events are&hellip; annoying.</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">FreezeMessenger has three sets of events -- one for new messages, one for notifications towards users, and one for notifications towards rooms. Clients can use special APIs to see events for the logged in user, for a certain room, or for messages inserted in a room. (There is some obvious overlap between room and new message events, though in practice keeping new messages separate from the room events is highly beneficial.)</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">By default, events are stored in memory tables (see above), but on MySQL this requires polling these memory tables for new results. Ideally, they would instead be implemented instead with sockets, with the event API connected to a socket that is sent events by other APIs.</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">In practice, doing that has proven incredibly, maddeningly difficult, partially due to PHP&rsquo;s own internal limits. Instead, it has proven tremendously easier in testing to rely on server applications that do the heavy lifting, and we&rsquo;ve considered writing a minimal Java application ourselves that would do this job.</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span>[TODO] In the meantime, however, we take advantage of the very same functionality in PostGreSQL&rsquo;s </span><span class="c12">listen</span><span>&nbsp;and </span><span class="c12">notify</span><span>. These, of-course, only work with PostGreSQL, and when you install FreezeMessenger, you will only be able to configure a single database backend. Editing config.php, however, </span><span class="c17">will</span><span class="c5">&nbsp;allow you to configure PostGreSQL for use with the event tables, while leaving MySQL in-charge of everything else.</span></p><h1 class="c7" id="h.jr9dcluflyzo"><span class="c9">API: General Information</span></h1><h2 class="c6" id="h.5em0222x9zwq"><span class="c8">The General API Rules</span></h2><ul class="c10 lst-kix_iaipzzw60p4p-0 start"><li class="c0 c4"><span class="c5">For every resource type (e.g. room, user, message), there are two APIs: one for enumerating object that belong to this data type (and we do generally support fetching as many resources at once as the client desires), and one for altering a single object in the data type.</span></li><li class="c0 c4"><span class="c5">The alteration API typically supports four different actions: create, edit, delete, and undelete. Edit, delete, and undelete all use the same query string (which will specify the ID of the item being modified), while create doesn&rsquo;t use any additional query string. The action being taken itself can be specified either through the query string (as _action), but (with the exception of undelete) can also be specified by using the correct request method:</span></li></ul><ul class="c10 lst-kix_iaipzzw60p4p-1 start"><li class="c0 c14"><span class="c5">PUT for create</span></li><li class="c0 c14"><span class="c5">POST for edit</span></li><li class="c0 c14"><span class="c5">DELETE for delete</span></li></ul><ul class="c10 lst-kix_iaipzzw60p4p-0"><li class="c0 c4"><span class="c5">The request body is used by the create and edit actions to specify new data for the object being changed.</span></li><li class="c0 c4"><span class="c5">All responses will be in JSON. There is a standard format for exceptions (which we detail below), and retrievals will generally follow the same structure.</span></li><li class="c0 c4"><span>All parameters can be sent using HTTP standard form encoding. For instance, dictionaries should be encoded as </span><span class="c12">?var[entry1]=value&amp;var[entry2]=value</span><span>, while lists should be encoded as </span><span class="c12">?var[]=value&amp;var[]=value</span><span>. JSON, where used, should be encoded as a JSON string, e.g. </span><span class="c12 c19">?var={&lsquo;value&rsquo;:0}</span></li></ul><p class="c0 c2"><span class="c5"></span></p><h2 class="c6" id="h.423mzkkx6blx"><span class="c8">We&rsquo;re Not RESTful, but We&rsquo;re Close</span></h2><p class="c0"><span class="c5">There are many reasons for why we ultimately didn&rsquo;t use a REST API, but the two main ones are:</span></p><ul class="c10 lst-kix_40f6n3ltgi70-0 start"><li class="c0 c4"><span class="c5">REST would limit FreezeMessenger&rsquo;s portability, as the REST directory structure can generally only be implemented (effectively) through the use of URL rewriting (such as mod_rewrite), which may not be available on all servers.</span></li><li class="c0 c4"><span class="c5">The inability to send DELETE and PUT methods through pure HTML (without AJAX) was at least a small consideration, as a pure HTML approach is still useful for clients running on, for instance, flip phones and Raspbery Pi-like computers.</span></li><li class="c0 c4"><span class="c5">The creation and alteration APIs use entirely different code, and even if we did implement REST, this would still be different files. We see no reason to try to force these to use the same identifier if we&rsquo;re not going to use a URL rewriter.</span></li></ul><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">However, recognising that REST is a good API design pattern, we did implement a number of RESTful ideas:</span></p><ul class="c10 lst-kix_jaqdxbe30fam-0 start"><li class="c0 c4"><span class="c5">While separate APIs are used for creating and retrieving objects, the same API is used for creating, editing, and deleting objects.</span></li><li class="c0 c4"><span class="c5">The creation API always uses GET.</span></li><li class="c0 c4"><span class="c5">The non-creation APIs use the query string for identifying objects, and the request body for data. They will never use GET.</span></li><li class="c0 c4"><span class="c5">The action (edit, delete, create) for non-creation APIs can be specified in the query string (as _method), but it can also be inferred from the request method; if no query string parameter is specified, then a request method of POST will result in data modification, a request method of PUT will result in data creation, and a request method of DELETE will result in deletion (though our API almost never allows for any user to outright delete data, instead setting a deletion flag that can be removed).</span></li><li class="c0 c4"><span class="c5">While an effort is made to make it possible to a client to fetch a lot of simultaneous data as once (something generally considered un-RESTful), we do make certain limitations, such as only allowing messages to be retrieved from a single room per query.</span></li><li class="c0 c4"><span class="c5">Similarly, modifications are only supported on one resource at a time.</span></li></ul><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">For example, while a normal REST interface would implement message retrieval as</span></p><p class="c0"><span class="c5">GET /room/1/messages/?min=10&amp;max=100</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">Our API retrieves this as</span></p><p class="c0"><span class="c5">GET getMessages.php?roomId=1&amp;min=10&amp;max=100</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">And could, through a URL rewriter (though one is not provided) support the first query. Indeed, many queries could be rewritten into standard REST, though some of our APIs allow for fetching from multiple resources simultaneously, e.g.</span></p><p class="c0"><span class="c5">GET getRooms.php?roomIds=1,4,5</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">Would generally not be implementable in REST, unless the API used this unRESTful style:</span></p><p class="c0"><span class="c5">GET /room/1,4,5/</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">For a DELETE example, a standard REST API would implement room deletion using</span></p><p class="c0"><span class="c5">DELETE /room/1</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">Our API instead implements this in either of these styles:</span></p><p class="c0"><span class="c5">POST editRoom.php?roomId=1&amp;_method=delete</span></p><p class="c0"><span class="c5">DELETE editRoom.php?roomId=1</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">And could easily use a URL rewriter to implement the standard REST query.</span></p><p class="c0 c2"><span class="c5"></span></p><h2 class="c6" id="h.mz199cw87k3b"><span class="c8">The Exception Structure</span></h2><p class="c0"><span class="c5">Every API request will return its errors in the same format. Some errors are standard for each API (and will be listed in the relevant API section), but many are the result of failed database queries, bad logic, or asserts. Every exception should generally come with a short string code (to allow for custom error messages) and a longer, English error description that can be used if you don&rsquo;t want to implement a custom error message. The code should not change, but the error message can.</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">Perhaps frustratingly, not every error code uses the same style; some are camel case, eithers use underscores. This is a consequence of FreezeMessenger using third-party libraries with different conventions; we make an effort to ensure that all codes are returned in the standard exception structure, but the codes themselves can wildly different.</span></p><p class="c0 c2"><span class="c5"></span></p><h2 class="c6" id="h.yy08ljdhz53j"><span class="c8">[Planned] The Captcha</span></h2><p class="c0"><span class="c5">If a captcha is required to complete a request, a 302 redirect will be issued to an HTML page containing the Recaptcha model. (Strictly-speaking, API implementations should anticipate the possibility that this could be any captcha on an HTML/Javascript page.) Completion of the recaptcha will eventually lead to a 302 redirect back to the original query.</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0"><span class="c5">Detection of this redirect is fairly easy; the 302 redirect URL will always be to /api/captcha; upon navigating away from /api/captcha, the request will complete and the API client can continue as normal.</span></p><p class="c0 c2"><span class="c5"></span></p><h2 class="c6" id="h.2jr5qhxrvnh9"><span class="c8">Common General Exceptions</span></h2><p class="c0 c2"><span class="c5"></span></p><h2 class="c6" id="h.h57lvwdwvzfw"><span class="c8">OAuth2 Logins</span></h2><p class="c0"><span class="c5">With the single exception of obtaining the server&rsquo;s status and configuration page (getServerStatus.php), every API requires that a valid OAuth2 session token be used.</span></p><p class="c0 c2"><span class="c5"></span></p><p class="c0 c2"><span class="c5"></span></p><p class="c23 title" id="h.lzp3oc11hzlh"><span class="c21">API: Javascript Wrapper</span></p><p class="c0"><span class="c5">Our Javascript wrapper is a fairly basic wrapper for the API methods. It uses jQuery AJAX, </span></p><div class="c22"><p class="c1"><a href="#cmnt_ref1" id="cmnt1">[a]</a><span class="c5">To the best of my knowledge, PHP&#39;s isset is an O(1) hash-search. See also http://www.phpbench.com/</span></p></div><div class="c22"><p class="c1"><a href="#cmnt_ref2" id="cmnt2">[b]</a><span class="c5">Notably, hasPermission&#39;s entire design ended up being shaped around this idea, and I think for the better. Originally, the header was:</span></p><p class="c1 c2"><span class="c5"></span></p><p class="c1"><span class="c5">bool hasPermission(Fim\fimUser, Fim\fimRoom, permission)</span></p><p class="c1 c2"><span class="c5"></span></p><p class="c1"><span class="c5">Whereas the new header is</span></p><p class="c1"><span class="c5">permissionField hasPermission(Fim\fimUser, Fim\fimRoom)</span></p><p class="c1 c2"><span class="c5"></span></p><p class="c1"><span class="c5">thus, the old call, hasPermission(..., ..., USER_PERMISSION_VIEW) is instead called as hasPermission(..., ...) &amp; USER_PERMISSION_VIEW.</span></p></div></body></html>