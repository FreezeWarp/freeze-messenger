<?php

namespace Database;

/**
 * A result returned from {@see Database::select()} that can be used to obtain arrays of result data, or obtain metadata about the result.
 *
 * @package Database
 */
class Result
{
    /**
     * @var array The result-set returned from the query.
     */
    public $queryData;

    /**
     * @var array The column-name mapping (between actual in-database names and column aliases) used to generate this result.
     */
    public $reverseAlias;

    /**
     * @var string The source query used to generate this result.
     */
    public $sourceQuery;

    /**
     * @var Database The database object used to generate this result.
     */
    public $database;

    /**
     * @var bool Whether this result should be considered "paginated." If so, more results are available by simply incrementing the page used in the initial query.
     */
    public $paginated = false;

    /**
     * @var int The number of available results.
     */
    public $count = 0;

    /**
     * @var int The result number we are currently pointing to.
     */
    public $resultIndex = 0;

    /**
     * Construct
     *
     * @param object $queryData   - The database object.
     * @param string $sourceQuery - The source query, which can be stored for referrence.
     *
     * @return void
     */
    public function __construct(ResultInterface $queryData, $reverseAlias, $sourceQuery, Database $database, int $resultLimit = 0)
    {
        $this->queryData = $queryData;
        $this->reverseAlias = $reverseAlias;
        $this->sourceQuery = $sourceQuery;
        $this->database = $database;

        if ($resultLimit > 1 && $this->queryData->getCount() > $resultLimit) {
            $this->paginated = true;
            $this->count = $resultLimit;
        }
        else {
            $this->count = $this->queryData->getCount();
        }
    }


    /**
     * @return int the number of rows in the resultset.
     */
    public function getCount()
    {
        return $this->count;
    }


    /**
     * @return mixed The next array of data from the result object, or false if no more are available.
     */
    public function fetchAsArray()
    {
        if ($this->resultIndex++ >= $this->count) {
            return false;
        }

        return $this->queryData->fetchAsArray();
    }


    /**
     * Get database resultset as a single associative array or multiple associative arrays. An empty array will be returned if an error occurs.
     *
     * @param bool|string $index When this is a string, it corresponds to a column whose value will be used to index the returned arrays. When it is true, the returned arrays will be indexed automatically, starting at 0. When it is false, only one array will be returned.
     * @param bool        $group If true, results will be grouped by the index, e.g. if you group on "entries", [1 => [["id" => 1, "entries" => 1], ["id" => 2, "entries" => 1]]] will be returned. If $group were false, [1 => ["id" => 1, "entries" => 1]] would be returned instead.
     *
     * @return array
     */
    public function getAsArray($index = true, $group = false)
    {
        $data = [];

        $rowNumber = 0; // Count the number of results processed, ensuring we don't exceed $this->count.
        $indexV = 0;

        if ($this->queryData !== false) {
            if ($index) { // An index is specified, generate & return a multidimensional array. (index => [key => value], index being the value of the index for the row, key being the column name, and value being the corrosponding value).
                while ($row = $this->fetchAsArray()) {
                    if ($rowNumber++ > $this->count) break; // Don't go over the pagination limit. In general, there will only be one extra result, which indicates that more results are available.

                    //if ($row === null || $row === false) break;

                    /* Decoding */
                    foreach ($row AS $columnName => &$columnValue) {
                        $columnValue = $this->applyColumnTransformation($columnName, $columnValue);
                    }



                    if ($index === true) { // If the index is boolean "true", we simply create numbered rows to use. (1,2,3,4,5)
                        $data[$indexV++] = $row; // Append the data.
                    }

                    else { // If the index is not boolean "true", we instead get the column value of the index/column name.
                        $index = (array)$index;

                        $ref =& $data;
                        for ($i = 1; $i <= count($index); $i++) {
                            $ref =& $ref[$row[$index[$i - 1]]];
                        }

                        if ($group)
                            $ref[] = $row;

                        else
                            $ref = $row;
                    }
                }

                return $data; // All rows fetched, return the data.
            }

            else { // No index is present, generate a two-dimensional array (key => value, key being the column name, value being the corrosponding value).
                $return = $this->fetchAsArray();

                if ($return) {
                    foreach ($return AS $columnName => &$columnValue) {
                        $columnValue = $this->applyColumnTransformation($columnName, $columnValue);
                    }
                }

                return (!$return ? [] : $return);
            }
        }

        else {
            return []; // Query data is false or null, return an empty array.
        }
    }


    /**
     * Get an array of object instances. Each object instance will be constructed with a Result object instance as its sole parameter.
     *
     * @param object|string $objectType The name of the object to instantiate for each row.
     * @param bool|string $key An object parameter to index the result array by, if any.
     *
     * @return array
     */
    function getAsObjects($objectType, $key = false) {
        $return = array();

        for ($i = 0; $i < $this->count; $i++) {
            $object = $this->getAsObject($objectType);

            if ($key)
                $return[$object->{$key}] = $object;
            else
                $return[] = $object;

        }

        return $return;
    }

    /**
     * Get an object instances. Each object instance will be constructed with a Result object instance as its sole parameter.
     *
     * @param object|string $objectType The name of the object to instantiate for the row.
     *
     * @return Object
     */
    function getAsObject($objectType) {
        return new $objectType($this);
    }


    /**
     * Get a single value from the current resultset.
     *
     * @param $column string The column's value to get.
     *
     * @return mixed
     */
    public function getColumnValue($column)
    {
        $row = $this->fetchAsArray();

        return $this->applyColumnTransformation($column, $row[$column]);
    }


    /**
     * Get an array of values from specific columns. If more than one column is passed, the result will be grouped in order of columns. For instance, if four columns are passed, the result will be a four-dimensional array, indexed first by the first column, second by the second column, and so-on.
     *
     * @param $columns array The list of columns whose values should be retrieved.
     *
     * @return array
     */
    public function getColumnValues($columns) : array
    {
        $columnValues = [];
        $columns = (array)$columns;

        while ($row = $this->fetchAsArray()) {
            $ref =& $columnValues;
            for ($i = 1; $i < count($columns); $i++) {
                $ref =& $ref[$row[$columns[$i - 1]]];
            }

            $ref[] = $this->applyColumnTransformation(end($columns), $row[end($columns)]);
        }

        return $columnValues;
    }

    /**
     * Get only specific columns from the current resultset, as a three dimensional array.
     *
     * @param $columns array An array of columns to include in the response.
     * @param $index   string Optionally, a column to use for array indexing. If omitted, the outer array will be indexed sequentially.
     *
     * @return mixed
     */
    public function getAsSlicedArray($columns, $index = null)
    {
        $columnValues = [];
        $columns = (array)$columns;

        while ($row = $this->fetchAsArray()) {
            $rowColumnValues = [];
            foreach ($columns AS $column) {
                $rowColumnValues[$column] = $this->applyColumnTransformation($column, $row[$column]);
            }

            if ($index)
                $columnValues[$this->applyColumnTransformation($index, $row[$index])] = $rowColumnValues;

            else
                $columnValues[] = $rowColumnValues;
        }

        return $columnValues;
    }


    /**
     * Get the database object as a string, using the specified format/template. Each result will be passed to this template and stored in a string, which will be appended to the entire result.
     * Use standard PHP notation on column names, e.g. "$id - $name".
     *
     * @param string $format
     *
     * @return mixed
     */
    public function getAsTemplate($format)
    {
        $data = '';
        $uid = 0;

        if ($this->queryData !== false && $this->queryData !== null) {
            while (false !== ($row = $this->fetchAsArray())) { // Process through all rows.
                $uid++;
                $row['uid'] = $uid; // UID is a variable that can be used as the row number in the template.

                $data .= preg_replace_callback('/\$([a-zA-Z0-9]+)/', function ($matches) use ($row) {
                    return $row[$matches[1]];
                }, $format);
            }

            return $data;
        }

        else {
            return false; // Query data is false or null, return false.
        }
    }


    /**
     * Checks to see if a given column is supposed to be encoded, and returns the encoded value if so.
     *
     * @param string $column The column name in the resultset.
     * @param string $value  The column value returned by the database.
     *
     * @return mixed The column value, encoded if applicable.
     */
    private function applyColumnTransformation($column, $value)
    {
        if (isset($this->reverseAlias[$column])) {
            $tableName = $this->reverseAlias[$column][0];

            if (isset($this->database->encode[$tableName][$column]) && $this->database->encode[$tableName][$column][2]) {
                return call_user_func($this->database->encode[$tableName][$column][2], $value);
            }

            else {
                return $value;
            }
        }
        else {
            return $value;
        }
    }
}

?>
